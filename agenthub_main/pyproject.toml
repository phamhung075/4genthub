[project]
name = "agenthub"
dynamic = ["version"]
description = "agenthub - Advanced MCP server framework with integrated AI agent orchestration and task management."
authors = [{ name = "daihungpham" }]
dependencies = [
    "python-dotenv>=1.1.0",
    "exceptiongroup>=1.2.2",
    "httpx>=0.28.1",
    "mcp>=1.9.4,<2.0.0",
    "openapi-pydantic>=0.5.1",
    "rich>=13.9.4",
    "typer>=0.15.2",
    "authlib>=1.5.2",
    # Task management dependencies (migrated from cursor_agent)
    "PyYAML>=6.0.1",
    "jsonschema>=4.17.0",
    "psutil>=5.9.0",
    "pydantic[email]>=2.11.7",
    # Authentication and security dependencies
    "httpx>=0.28.1", # Already included above for HTTP requests to Supabase
    "cryptography>=42.0.0", # For secure token generation and hashing
    # Session persistence dependencies
    "redis>=5.0.0", # Redis client for session persistence
    "pytest-asyncio>=1.0.0",
    "pybars3>=0.9.7",
    # Database ORM dependencies
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0", # PostgreSQL adapter
    "alembic>=1.13.0", # Database migrations
    # Authentication dependencies
    "bcrypt>=4.1.0", # Password hashing
    "PyJWT>=2.8.0", # JWT token management
    "python-jose[cryptography]>=3.5.0", # JWT with cryptography support for Keycloak
    "fastapi>=0.115.12",
    "uvicorn>=0.34.3",
    "python-multipart>=0.0.20",
    "supabase>=2.18.1",
    "docker>=7.1.0",
    "aiohttp>=3.12.15",
    # Email service dependencies
    "jinja2>=3.1.0", # Email template engine
]
requires-python = ">=3.10"
readme = "README.md"
license = "Apache-2.0"

keywords = [
    "mcp",
    "mcp server",
    "mcp client",
    "model context protocol",
    "agenthub",
    "llm",
    "agent",
    "task management",
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]

[dependency-groups]
dev = [
    "beautifulsoup4>=4.13.3",
    "httpx>=0.28.1",
    "copychat>=0.5.2",
    "dirty-equals>=0.9.0",
    "fastapi>=0.115.12",
    "ipython>=8.12.3",
    "pdbpp>=0.10.3",
    "pre-commit",
    "pyinstrument>=5.0.2",
    "pyright>=1.1.389",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=6.1.1",
    "pytest-env>=1.1.5",
    "pytest-flakefinder",
    "pytest-httpx>=0.35.0",
    "pytest-report>=0.2.1",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.6.1",
    "ruff",
]

[project.scripts]
agenthub = "fastmcp.cli:app"

[project.urls]
Homepage = "https://github.com/agenthub/agenthub"
Repository = "https://github.com/agenthub/agenthub"
Documentation = "https://github.com/agenthub/agenthub"

[project.optional-dependencies]
websockets = ["websockets>=15.0.1"]


[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/fastmcp"]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true
fallback-version = "0.0.0"


[tool.pytest.ini_options]
markers = [
    "server: Server tests",
    "unit: Pure unit tests (no database or external dependencies)",
    "interface: Interface tests",
    "architecture: Architecture tests",
    "business_rules: Business rules tests",
    "migration: Migration tests",
    "performance: Performance tests",
    "integration: Integration tests (database required)",
    "e2e: End-to-end tests",
    "slow: Tests that take more than 2 seconds",
    "fast: Tests that take less than 0.1 seconds",
    "vision: Vision System tests",
    "context: Hierarchical context tests",
    "database: Tests requiring database",
    "postgresql: Tests requiring PostgreSQL",
    "isolated: Tests requiring isolated environment",
    "mcp: MCP protocol integration tests",
    "memory: Memory usage tests",
    "stress: Stress tests",
    "load: Load tests",
    "timeout: Tests with timeout restrictions",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"
# filterwarnings = ["error::DeprecationWarning"]
# timeout = 3  # Requires pytest-timeout plugin
# Environment variables for testing - handled by pytest-env plugin
# env = [
#     "FASTMCP_TEST_MODE=1",
#     'FASTMCP_LOG_LEVEL=DEBUG',
#     'FASTMCP_ENABLE_RICH_TRACEBACKS=0',
# ]
testpaths = ["src/tests", "src/**/task_management/**/__tests__"]
norecursedirs = ["src/tests/manual"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Speed optimization settings
addopts = [
    "--tb=short",           # Shorter tracebacks for faster output
    "--strict-markers",     # Enforce marker registration
    "--strict-config",      # Enforce configuration
    "-ra",                  # Show summary of all non-passing tests
    "--durations=10",       # Show 10 slowest tests
]

# Parallel execution settings (uncomment to enable by default)
# addopts = [
#     "--tb=short",
#     "--strict-markers", 
#     "--strict-config",
#     "-ra",
#     "--durations=10",
#     "-n", "auto",         # Run tests in parallel
# ]

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv", ".git", "dist"]
pythonVersion = "3.10"
pythonPlatform = "Darwin"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
useLibraryCodeForTypes = true
venvPath = "."
venv = ".venv"
strict = ["src/fastmcp/server/server.py"]

[tool.ruff.lint]
extend-select = ["I", "UP"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/examples/*",
    "*/deprecated/*",
    "*/removed_*",
]
branch = true
data_file = ".coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pass",
    "\\.\\.\\.",
    "raise ImportError",
    "except ImportError:",
]
fail_under = 80
precision = 2
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"
title = "agenthub Test Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "I001", "RUF013"]
# allow imports not at the top of the file
"src/fastmcp/__init__.py" = ["E402"]

