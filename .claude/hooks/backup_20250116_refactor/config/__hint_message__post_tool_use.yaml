# Post-Tool Use Hint Messages Configuration
# This file defines contextual hints shown AFTER tool execution
# Helps AI agents understand next steps and verify correctness

version: "1.0"
enabled: true

# Tool-specific post-execution hints
tool_hints:
  Task:
    success:
      message: |
        Sub-agent delegated successfully.
        Next steps:
        1. Wait for agent to complete work
        2. Update MCP task status when done
        3. Verify deliverables meet requirements

    patterns:
      - pattern: "agent_returned"
        message: |
          Sub-agent completed work.
          Now you should:
          1. Verify task completion
          2. Update MCP task status
          3. Report results to user

  mcp__dhafnck_mcp_http__manage_task:
    create:
      success:
        message: |
          Task created: {task_id}
          Remember to:
          1. Use this task_id when delegating
          2. Update status as work progresses
          3. Complete task when finished

    update:
      success:
        message: |
          Task updated successfully.
          Continue tracking progress.

    complete:
      success:
        message: |
          Task completed and archived.
          Results logged for future reference.

  Write:
    success:
      patterns:
        - pattern: "test_file_created"
          message: |
            Test file created.
            Next: Update TEST-CHANGELOG.md

        - pattern: "documentation_created"
          message: |
            Documentation created.
            Next: Update ai_docs/index.json

  Edit:
    success:
      message: |
        File edited successfully.
        Consider:
        - Running tests if code changed
        - Updating documentation if needed
        - Checking for related files

  MultiEdit:
    success:
      message: |
        Multiple edits applied successfully.
        All changes were atomic.

  Bash:
    patterns:
      - pattern: "test_command"
        result: "passed"
        message: |
          Tests passed!
          Code changes verified.

      - pattern: "test_command"
        result: "failed"
        message: |
          Tests failed!
          Review errors and fix issues.

      - pattern: "git_status"
        message: |
          Git status checked.
          Review changes before committing.

  TodoWrite:
    success:
      message: |
        Todo list updated.
        Current tasks tracked for coordination.

  Read:
    success:
      patterns:
        - pattern: "before_edit"
          message: |
            File read successfully.
            You can now safely edit this file.

# Workflow completion hints
workflow_completion:
  task_delegation:
    condition: "task_created_and_delegated"
    message: |
      DELEGATION COMPLETE
      - Task created: {task_id}
      - Agent assigned: {agent}
      - Status: Tracking

  file_modification:
    condition: "file_read_and_edited"
    message: |
      FILE MODIFICATION COMPLETE
      - File updated successfully
      - Changes applied cleanly

  test_creation:
    condition: "test_file_created"
    message: |
      TEST CREATION COMPLETE
      - Test file created in correct location
      - Remember to run tests
      - Update TEST-CHANGELOG.md

# Error recovery hints
error_hints:
  file_not_read:
    tool: ["Edit", "MultiEdit"]
    error: "File has not been read yet"
    message: |
      Must read file before editing!
      Solution: Use Read tool first

  task_not_found:
    tool: "mcp__dhafnck_mcp_http__manage_task"
    error: "Task not found"
    message: |
      Task ID does not exist!
      Solution: Create task first or verify ID

  permission_denied:
    tool: "Bash"
    error: "Permission denied"
    message: |
      Insufficient permissions!
      Solution: Check file permissions or use sudo if appropriate

  blocked_operation:
    tool: ["Write", "Edit"]
    error: "blocked"
    message: |
      Operation blocked by hook!
      Review the error message and follow guidelines.

# Success patterns and next actions
success_patterns:
  mcp_task_workflow:
    sequence:
      - tool: "mcp__dhafnck_mcp_http__manage_task"
        action: "create"
      - tool: "Task"
    message: |
      Perfect workflow execution!
      Task created then Agent delegated

  file_edit_workflow:
    sequence:
      - tool: "Read"
      - tool: "Edit"
    message: |
      Correct file editing workflow!
      Read then Edit pattern followed

  test_workflow:
    sequence:
      - tool: "Write"
        path_contains: "test"
      - tool: "Bash"
        command_contains: "test"
    message: |
      Test workflow complete!
      Test created then Test executed

# Metrics and tracking
metrics:
  track_patterns:
    - delegation_without_task
    - edit_without_read
    - test_in_wrong_location
    - documentation_not_updated

  report_frequency: "session_end"

# Conditional logic helpers
helpers:
  check_task_exists:
    function: |
      def has_active_task(session_id):
        tracker = get_task_tracker(session_id)
        return tracker.get_task_summary()['total'] > 0

  check_file_read:
    function: |
      def was_file_read(file_path, session_id):
        return is_file_in_session(file_path, session_id)

  check_documentation:
    function: |
      def needs_doc_update(file_path):
        doc_path = Path('ai_docs/_absolute_docs') / file_path.relative_to('/')
        return (doc_path.with_suffix('.md')).exists()

# Learning patterns
learning:
  common_mistakes:
    - pattern: "Task without manage_task"
      frequency: high
      solution: "Always create MCP task first"

    - pattern: "Edit without Read"
      frequency: medium
      solution: "Always read file before editing"

    - pattern: "Tests in wrong location"
      frequency: low
      solution: "Use approved test directories"

  best_practices:
    - "Create MCP task then Get ID then Delegate with ID only"
    - "Read then Edit then Verify"
    - "Test then Document then Commit"