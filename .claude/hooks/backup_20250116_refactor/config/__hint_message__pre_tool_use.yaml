# Pre-Tool Use Hint Messages Configuration
# This file defines contextual hints shown BEFORE tool execution
# Helps AI agents understand requirements and best practices

version: "1.0"
enabled: true

# Global hints shown for all tools
global_hints:
  mcp_task_reminder:
    condition: "no_active_tasks_and_master_orchestrator"
    priority: high
    message: |
      [WARNING] REMINDER: You're the master-orchestrator with NO active MCP tasks!
      Create an MCP task BEFORE delegating work:
      mcp__dhafnck_mcp_http__manage_task(action="create", title="...", assignees="...")

  documentation_check:
    condition: "modifying_important_file"
    priority: medium
    message: |
      [DOCS] This file has documentation in ai_docs/_absolute_docs/
      Remember to update documentation after modifications.

# Tool-specific hints
tool_hints:
  Task:
    default:
      message: |
        [DELEGATE] Delegating to sub-agent. Ensure:
        1. MCP task exists with full context
        2. Pass only task_id to agent
        3. Update task status when complete

    patterns:
      - pattern: "no_task_id_in_prompt"
        message: |
          [WARNING] Missing task_id in delegation!
          Always include: prompt=f"task_id: {task_id}"

      - pattern: "passing_full_context"
        message: |
          [WARNING] Don't pass full context in delegation!
          Store context in MCP task, pass only ID.

  mcp__dhafnck_mcp_http__manage_task:
    create:
      message: |
        [CREATE] Creating MCP task. Include:
        - Clear, specific title
        - Detailed context in 'details'
        - Appropriate assignees
        - File paths with line numbers

    update:
      message: |
        [UPDATE] Updating task progress. Include:
        - Current status
        - Progress percentage if applicable
        - Any blockers or insights

    complete:
      message: |
        [COMPLETE] Completing task. Include:
        - Completion summary
        - Testing notes
        - Insights found

  Write:
    default:
      message: |
        [WRITE] Creating new file. Consider:
        - Is this file absolutely necessary?
        - Could you edit an existing file instead?
        - Follow project structure rules

    patterns:
      - pattern: "root_directory"
        message: |
          [WARNING] Creating file in root directory!
          Only allowed files from __claude_hook__allowed_root_files

      - pattern: "test_file"
        message: |
          [TEST] Test file detected!
          Must be in approved test directories.

      - pattern: "documentation"
        message: |
          [DOCS] Documentation file detected!
          Must be in ai_docs/ folder structure.

  Edit:
    default:
      message: |
        [EDIT] Editing file. Remember:
        - Read the file first
        - Preserve exact indentation
        - Make minimal necessary changes

    patterns:
      - pattern: "not_read_yet"
        message: |
          [WARNING] File not read yet!
          Always use Read tool before Edit.

  MultiEdit:
    default:
      message: |
        [MULTI-EDIT] Multiple edits. Ensure:
        - All edits are for the same file
        - Edits are applied sequentially
        - Earlier edits don't affect later ones

  Bash:
    patterns:
      - pattern: "rm_command"
        message: |
          [WARNING] Dangerous rm command detected!
          This will be blocked. Use safer alternatives.

      - pattern: "find_command"
        message: |
          [SEARCH] Use Grep or Glob tools instead of find
          They're optimized for code search.

      - pattern: "cat_command"
        message: |
          [READ] Use Read tool instead of cat
          It provides better formatting and line numbers.

  TodoWrite:
    default:
      message: |
        [TODO] Updating todo list. Remember:
        - This is for coordination tracking only
        - Not for actual work items (use MCP tasks)
        - Keep status accurate and current

# Workflow-specific hints
workflow_hints:
  delegation_flow:
    triggers:
      - "Task tool with no prior manage_task"
    message: |
      [ERROR] DELEGATION WORKFLOW ERROR!
      Correct flow:
      1. Create MCP task with context
      2. Get task_id from response
      3. Delegate with task_id only
      Never delegate without MCP task!

  file_modification_flow:
    triggers:
      - "Edit/Write without Read"
    message: |
      [WORKFLOW] FILE MODIFICATION WORKFLOW:
      1. Read file first (understand context)
      2. Plan changes carefully
      3. Edit with minimal modifications
      4. Verify changes if needed

  testing_flow:
    triggers:
      - "Creating test files"
    message: |
      [TEST] TESTING WORKFLOW:
      1. Tests go in approved directories
      2. Follow existing test patterns
      3. Run tests after creation
      4. Update TEST-CHANGELOG.md

# Contextual rules
context_rules:
  - name: "master_orchestrator_checks"
    applies_to: ["master-orchestrator-agent"]
    checks:
      - no_tasks_before_delegation
      - proper_task_context
      - task_id_in_delegation

  - name: "sub_agent_checks"
    applies_to: ["coding-agent", "debugger-agent", "test-orchestrator-agent"]
    checks:
      - has_task_id_in_prompt
      - updates_task_progress
      - completes_task_when_done

# Severity levels
severity_levels:
  high:
    color: "red"
    prefix: "[CRITICAL]"
    blocking: true

  medium:
    color: "yellow"
    prefix: "[WARNING]"
    blocking: false

  low:
    color: "cyan"
    prefix: "[INFO]"
    blocking: false

# Dynamic conditions
conditions:
  no_active_tasks_and_master_orchestrator:
    check: |
      active_tasks == 0 and current_agent == "master-orchestrator-agent"

  modifying_important_file:
    check: |
      file_has_documentation(file_path)

  no_task_id_in_prompt:
    check: |
      tool == "Task" and "task_id" not in parameters.get("prompt", "")

  passing_full_context:
    check: |
      tool == "Task" and len(parameters.get("prompt", "")) > 500