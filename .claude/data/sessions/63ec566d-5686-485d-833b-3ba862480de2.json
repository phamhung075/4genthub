{
  "session_id": "63ec566d-5686-485d-833b-3ba862480de2",
  "prompts": [
    "list all research agent on my base",
    "\u2022 Objective: To understand how the system works, identify all relevant files, and locate where a problem is situated.\n\u2022 Method: Use a detailed research prompt designed to produce file names and line numbers. This allows the agent to know exactly where to look without having to search through numerous files.\n\u2022 Importance: A misunderstanding at the research stage (e.g., a bad line of research, a misunderstanding of how the system works, data flows, or where things happen) can lead to thousands of bad lines of code later in the process. It is crucial to dedicate time to properly specify the problem and ensure the agent comprehends the system's operation. Human review of the research output helps in catching problems early.\n\u2022 Output: A detailed set of information, typically generated by a research prompt, which includes file names and line numbers. This precise output enables the agent to pinpoint exact locations for further action.\nfor each agent you need add these information on his base yaml",
    "i have reverse your change because it not corerct, i demande change on base yaml, not on .md",
    "use tree commande for see structure of dhafnck_mcp_main/agent-library/agents/deep_research_agent, then reupdate content follow actual structure",
    "you have miss 1 agent",
    "list all Planning agents on base",
    "continue",
    "continue",
    "list only agent can planner task for other agent",
    "need analyze actual base follow this guide:\n2. Planning Phase\n\u2022 Objective: To describe every change the agent will make, not line by line, but by including the files and snippets of what will be modified. It also explicitly outlines how testing and verification will be conducted at each step.\n\u2022 Method: Utilize a planning prompt that guides the agent in creating a detailed plan.\n\u2022 Importance: A flawed part of the plan can result in hundreds of incorrect lines of code. The plan is generally much shorter than the actual code changes, making it easier to review. Human review and validation of plans are essential for maintaining mental alignment within the team and fostering a shared understanding of the codebase. Catching problems at this planning stage is crucial for efficiency.\n\u2022 Output: A detailed plan that describes each proposed change, identifies the specific files and code snippets involved, and specifies the testing and verification procedures.",
    "list all Implement Phase agents",
    "make todos list for update all these agents, stop, for wait what need to update to these agent",
    "3. Implement Phase\n\u2022 Objective: To write the code based on the detailed plan.\n\u2022 Method: If the plan is of high quality, the agent can write the code efficiently. The plan is constantly updated as progress is made, and a new context window is utilized for each phase. A critical aspect is to consistently keep context utilization under 40% during this phase.\n\u2022 Importance: A well-defined plan is crucial for the agent to generate code effectively. Maintaining context utilization below 40% is a key principle for optimizing LLM performance, as the quality of output is directly tied to the quality of the context input.\n\u2022 Output: The primary output is the production-ready code itself.\ni want update this to agents\ncall sub-agents work paralelle for each agent, give subagent context necessaire for each agent, do not include all context",
    "what agents not update on list ?",
    "continue, dont stop if all agent on list not update, give me list agent update on end",
    "dhafnck_mcp_main/src/fastmcp/task_management/interface/mcp_controllers/call_agent_mcp_controller/call_agent_description.py need update for show correct agents list dispo on /dhafnck_mcp_main/agent-library/agents/"
  ],
  "agent_name": "Axiom"
}