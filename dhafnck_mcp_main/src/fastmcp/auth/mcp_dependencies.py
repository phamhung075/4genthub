"""
MCP authentication dependencies for using frontend-generated tokens.

This module provides authentication dependencies specifically for MCP operations.
It validates tokens generated by the frontend and extracts user information.
"""

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import Optional
import jwt
import os
import logging
from datetime import datetime

from fastmcp.auth.domain.entities.user import User

logger = logging.getLogger(__name__)

# Security scheme
security = HTTPBearer()

# Frontend JWT configuration (must match frontend_auth_routes.py)
FRONTEND_JWT_SECRET = os.getenv("JWT_SECRET_KEY", "your-secret-key-here")
FRONTEND_JWT_ALGORITHM = "HS256"


async def get_current_mcp_user(
    credentials: HTTPAuthorizationCredentials = Depends(security)
) -> User:
    """
    Get the current authenticated user from frontend-generated JWT token.
    
    This dependency validates tokens generated by the frontend authentication
    system and extracts user information for MCP operations.
    """
    if not FRONTEND_JWT_SECRET:
        logger.error("JWT_SECRET_KEY not configured for MCP authentication")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Server configuration error: JWT secret not set",
        )
    
    token = credentials.credentials
    
    try:
        # Decode the frontend-generated JWT token
        payload = jwt.decode(
            token, 
            FRONTEND_JWT_SECRET, 
            algorithms=[FRONTEND_JWT_ALGORITHM]
        )
        
        # Extract user information
        user_id = payload.get("sub") or payload.get("user_id")
        email = payload.get("email")
        username = payload.get("username")
        auth_provider = payload.get("auth_provider", "unknown")
        
        if not user_id:
            logger.error("Token missing user_id/sub claim")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token: missing user ID",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        # Check token expiration
        exp = payload.get("exp")
        if exp and datetime.utcnow().timestamp() > exp:
            logger.error("Token expired")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token expired",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        # Create User object for MCP operations
        user = User(
            id=user_id,
            email=email or f"{user_id}@{auth_provider}.local",
            username=username or email or user_id,
            password_hash=f"{auth_provider}-authenticated"
        )
        
        logger.info(f"MCP authenticated user: {user.id} (provider: {auth_provider})")
        return user
        
    except jwt.ExpiredSignatureError:
        logger.error("Token expired")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token expired",
            headers={"WWW-Authenticate": "Bearer"},
        )
    except jwt.InvalidTokenError as e:
        logger.error(f"Invalid token: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"MCP authentication error: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )


async def get_optional_mcp_user(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> Optional[User]:
    """
    Get the current authenticated user if available, otherwise return None.
    
    This is useful for MCP endpoints that should work with or without authentication.
    """
    if not credentials:
        return None
    
    try:
        return await get_current_mcp_user(credentials)
    except HTTPException:
        return None


