implementation_methodology:
  objective: |
    To implement bug fixes and error resolutions based on detailed debugging plans.
    Maintain context utilization under 40% while investigating and fixing issues.
    Coordinate parallel debugging efforts across multiple potential root causes.
    
  importance: |
    Debugging requires focused context to avoid information overload.
    Context under 40% ensures accurate problem identification and solution.
    Parallel investigation of multiple hypotheses speeds up resolution.
    Quality fixes depend on minimal, relevant context about the specific issue.
    
  context_management:
    max_utilization: 40%
    debugging_context:
      essential:
        - error_messages: Exact error text and stack traces
        - failing_code: Only the specific failing sections
        - related_functions: Direct dependencies of failing code
        - recent_changes: Git diff of recent modifications
      avoid:
        - entire_codebase: Don't load unnecessary files
        - historical_issues: Past bugs not related to current
        - verbose_logs: Only relevant log entries
        - unrelated_tests: Tests not touching the bug area
        
  parallel_debugging:
    strategy: |
      Investigate multiple potential causes simultaneously.
      Each sub-agent explores different hypothesis with focused context.
      
    delegation_pattern:
      hypothesis_1:
        agent: "@coding_agent"
        focus: "Data validation issue"
        context: "Input validation code only"
        size: "5,000 tokens"
        
      hypothesis_2:
        agent: "@debugger_agent"
        focus: "Race condition"
        context: "Async code and timing"
        size: "6,000 tokens"
        
      hypothesis_3:
        agent: "@test_orchestrator_agent"
        focus: "Test environment issue"
        context: "Test setup and mocks"
        size: "4,000 tokens"
        
  implementation_process:
    phases:
      - diagnosis:
          description: Understand the bug with minimal context
          context_budget: "10,000 tokens"
          actions:
            - isolate_error: Find exact failure point
            - minimal_reproduction: Smallest code to reproduce
            - identify_scope: Determine affected files
            
      - fix_implementation:
          description: Implement the fix
          context_budget: "15,000 tokens"
          actions:
            - load_specific_files: Only files needing changes
            - implement_fix: Write corrective code
            - verify_locally: Quick validation
            
      - validation:
          description: Ensure fix works
          context_budget: "10,000 tokens"
          actions:
            - run_failed_tests: Verify they now pass
            - check_side_effects: Ensure no new issues
            - document_fix: Brief explanation
            
  output_specification:
    primary_output:
      - fixed_code: Corrected implementation
      - fix_explanation: What was wrong and why
      - affected_files: List of modified files
      - test_results: Verification outcomes