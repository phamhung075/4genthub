# =============================================================================
# agenthub Environment Configuration Template
# =============================================================================
# Copy to .env and configure for your deployment (CapRover/Production priority)
# =============================================================================

# =============================================================================
# GENERAL SETTINGS
# =============================================================================
# Backend environment (Python/FastAPI) - controls database, logging, features
# Values: development | staging | production
ENV=production

# Container environment detection - automatically set by Docker
# Values: docker | local
# - docker: Running inside Docker container (set automatically by docker-menu.sh)
# - local: Running on local machine without Docker
# This is used for environment-aware configurations like logging paths
CONTAINER_ENV=local

APP_DEBUG=false

# Log Level Configuration - Automatically converted to lowercase
# Valid levels: DEBUG, INFO, WARNING, ERROR, CRITICAL (case-insensitive)
#
# DEVELOPMENT: DEBUG (most verbose, includes all debugging information)
# STAGING: INFO (standard operational information)
# PRODUCTION: WARNING (warnings and errors only, recommended for production)
# HIGH-TRAFFIC PRODUCTION: ERROR (errors and critical issues only)
#
# Note: The Docker entrypoint automatically converts to lowercase
# Examples: INFO -> info, Debug -> debug, WARNING -> warning
APP_LOG_LEVEL=INFO

# Frontend build environment (Node.js/Vite) - controls build optimizations
# Values: development | production | test
# NOTE: This affects build process only, not runtime behavior
NODE_ENV=production

# =============================================================================
# BACKEND CONFIGURATION
# =============================================================================

# CORS Configuration (comma-separated list of allowed origins)
# Use "*" to allow all origins (required for MCP/Claude Code access)
# Example: CORS_ORIGINS=*
# Or specify specific origins: CORS_ORIGINS=https://webapp.92.5.226.7.nip.io,https://api.92.5.226.7.nip.io
# Leave empty to use default wildcard (*) for universal access
CORS_ORIGINS=*

# -----------------------------------------------------------------------------
# Database (PostgreSQL Required) - SSL Configuration Guide
# -----------------------------------------------------------------------------
DATABASE_TYPE=postgresql
DATABASE_HOST=db.example.com
DATABASE_PORT=5432
DATABASE_NAME=agenthub
DATABASE_USER=postgres
DATABASE_PASSWORD=your_secure_password_here

# SSL Configuration - CRITICAL FOR DEPLOYMENT TYPE
# Choose the correct SSL mode based on your deployment scenario:
#
# CAPROVER DEPLOYMENT (Internal PostgreSQL):
# DATABASE_SSL_MODE=disable
# - CapRover PostgreSQL doesn't support SSL connections
# - Communication is secure within Docker internal network
# - Use DATABASE_HOST=srv-captain--postgres for CapRover
#
# MANAGED POSTGRESQL SERVICES (AWS RDS, Google Cloud SQL, Azure Database):
# DATABASE_SSL_MODE=require
# - All major cloud providers enforce SSL connections
# - Required for production security compliance
# - Use full hostname: mydb.region.provider.com
#
# SUPABASE:
# DATABASE_SSL_MODE=require (automatic, cannot be overridden)
# - Supabase always enforces SSL connections
# - Use DATABASE_TYPE=supabase for automatic SSL handling
#
# LOCAL DEVELOPMENT:
# DATABASE_SSL_MODE=disable or prefer
# - Local PostgreSQL usually doesn't have SSL configured
# - Use 'prefer' to try SSL first, fallback to no SSL
#
# SELF-MANAGED PRODUCTION WITH SSL CERTIFICATES:
# DATABASE_SSL_MODE=verify-ca or verify-full
# - Use when you have proper SSL certificates configured
# - verify-ca: Verify certificate authority
# - verify-full: Full certificate and hostname verification
#
DATABASE_SSL_MODE=disable

# Additional SSL options for advanced configurations:
# DATABASE_SSL_CA=/path/to/ca-cert.pem       # CA certificate file
# DATABASE_SSL_CERT=/path/to/client-cert.pem # Client certificate file
# DATABASE_SSL_KEY=/path/to/client-key.pem   # Client private key file

# Auto-initialize database on startup
AUTO_MIGRATE=false

# -----------------------------------------------------------------------------
# Server Settings
# -----------------------------------------------------------------------------
FASTMCP_HOST=0.0.0.0
FASTMCP_PORT=8000
JWT_SECRET_KEY=your_jwt_secret_key_at_least_32_chars_long_for_production

# -----------------------------------------------------------------------------
# Authentication (Keycloak)
# -----------------------------------------------------------------------------
AUTH_ENABLED=true
AUTH_PROVIDER=keycloak
KEYCLOAK_URL=https://auth.example.com
KEYCLOAK_REALM=agenthub
KEYCLOAK_CLIENT_ID=mcp-backend
KEYCLOAK_CLIENT_SECRET=your_keycloak_backend_client_secret_here

# -----------------------------------------------------------------------------
# CORS
# -----------------------------------------------------------------------------
CORS_ORIGINS=https://app.example.com,https://api.example.com
CORS_ALLOW_CREDENTIALS=true

# -----------------------------------------------------------------------------
# Feature Flags
# -----------------------------------------------------------------------------
FEATURE_VISION_SYSTEM=true
FEATURE_HIERARCHICAL_CONTEXT=true
FEATURE_MULTI_AGENT=true
FEATURE_RATE_LIMITING=true
FEATURE_REQUEST_LOGGING=false

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# Frontend Settings
# -----------------------------------------------------------------------------
FRONTEND_PORT=3800

# CRITICAL: Frontend API URL - Must match your backend deployment URL
# Local Development: http://localhost:8000
# Production Example: https://api.92.5.226.7.nip.io
# CapRover: https://backend-app-name.captain.yourdomain.com
VITE_API_URL=https://api.example.com

# Note: VITE_BACKEND_URL is deprecated - use VITE_API_URL above

# Frontend runtime environment (React/Browser) - controls app behavior
# Values: development | staging | production
# NOTE: This is accessible in browser code, use for feature flags
VITE_ENV=production

# Debug mode: true | false
VITE_DEBUG=false

# Application name
VITE_APP_NAME=agenthub

# -----------------------------------------------------------------------------
# Frontend Authentication
# -----------------------------------------------------------------------------
VITE_KEYCLOAK_URL=https://auth.example.com
VITE_KEYCLOAK_REALM=agenthub
VITE_KEYCLOAK_CLIENT_ID=mcp-frontend

# =============================================================================
# AI PATHS
# =============================================================================
AI_DATA=logs
AI_DOCS=ai_docs


# -----------------------------------------------------------------------------
# LOG Configuration Guide Frontend
# -----------------------------------------------------------------------------
# Logger Configuration
VITE_LOG_ENABLED=true
VITE_LOG_LEVEL=debug
VITE_LOG_SHOW_TIMESTAMP=true
VITE_LOG_SHOW_LEVEL=true
VITE_LOG_SHOW_FILE_PATH=true
VITE_LOG_COLORIZE=true
VITE_LOG_TO_CONSOLE=true
VITE_LOG_TO_LOCALSTORAGE=false
VITE_LOG_TO_REMOTE=false
VITE_LOG_REMOTE_ENDPOINT=
VITE_LOG_MAX_STORAGE_SIZE=5242880


# =============================================================================
# DEPLOYMENT NOTES & TROUBLESHOOTING
# =============================================================================
# PRODUCTION CHECKLIST:
# ‚úÖ Use strong passwords (32+ chars for JWT_SECRET_KEY)
# ‚úÖ Set DATABASE_SSL_MODE=disable for CapRover, require for managed services
# ‚úÖ Configure CORS_ORIGINS for your domains (exact match required)
# ‚úÖ Enable FEATURE_RATE_LIMITING=true for production
# ‚úÖ Use HTTPS URLs for all services (no HTTP in production)
# ‚úÖ Set AUTO_MIGRATE=false (manual migrations recommended)
# ‚úÖ Set appropriate APP_LOG_LEVEL (WARNING for production)
#
# SSL CONFIGURATION GUIDE:
# - disable: CapRover PostgreSQL, local development
# - require: AWS RDS, Google Cloud SQL, Azure Database, Supabase
# - prefer: Try SSL first, fallback to no SSL (development only)
# - verify-ca: Verify certificate authority (high security)
# - verify-full: Full hostname and certificate verification (highest security)
#
# DEPLOYMENT TYPES:
# üü¶ CAPROVER:
#    - DATABASE_HOST=srv-captain--postgres
#    - DATABASE_SSL_MODE=disable
#    - CORS_ORIGINS=https://app.captain.yourdomain.com
#    - Create PostgreSQL service first in CapRover
#
# üü® MANAGED POSTGRESQL (AWS/GCP/Azure):
#    - DATABASE_HOST=your-db.provider.com
#    - DATABASE_SSL_MODE=require
#    - Configure security groups/firewall rules
#    - Use connection pooling for production
#
# üü© SUPABASE:
#    - DATABASE_TYPE=supabase
#    - DATABASE_SSL_MODE ignored (always SSL)
#    - Use SUPABASE_* environment variables
#
# üü™ LOCAL DEVELOPMENT:
#    - ENV=development
#    - DATABASE_HOST=localhost
#    - DATABASE_SSL_MODE=disable or prefer
#    - AUTO_MIGRATE=true
#    - APP_LOG_LEVEL=DEBUG
#
# TROUBLESHOOTING COMMON ISSUES:
# ‚ùå "SSL connection closed unexpectedly" ‚Üí Check DATABASE_SSL_MODE setting
# ‚ùå "Connection refused" ‚Üí Verify DATABASE_HOST and network connectivity
# ‚ùå "JWT secret too short" ‚Üí Ensure JWT_SECRET_KEY is 32+ characters
# ‚ùå "Missing environment variables" ‚Üí Check all REQUIRED variables are set
# ‚ùå "CORS errors" ‚Üí Verify CORS_ORIGINS matches frontend URL exactly
#
# DOCUMENTATION:
# üìñ Docker Deployment Guide: ai_docs/operations/docker-deployment-guide.md
# üîß Troubleshooting Guide: ai_docs/troubleshooting-guides/production-deployment-issues.md
# üöÄ Production Guide: ai_docs/operations/production-deployment-guide.md
# =============================================================================