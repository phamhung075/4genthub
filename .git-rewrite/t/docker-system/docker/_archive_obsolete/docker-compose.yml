services:
  postgres:
    image: postgres:15-alpine
    container_name: dhafnck-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD:-postgres}
      POSTGRES_DB: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - dhafnck-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: dhafnck-redis
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - dhafnck-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ../..
      dockerfile: dhafnck_mcp_main/docker/Dockerfile
      args:
        - ENV=${ENV:-dev}
    container_name: dhafnck-backend
    environment:
      - DATABASE_TYPE=postgresql
      - DATABASE_URL=postgresql://dhafnck_user:dev_password@postgres:5432/dhafnck_mcp
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - APP_LOG_LEVEL=${APP_LOG_LEVEL}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - FASTMCP_TRANSPORT=streamable-http
      - FASTMCP_HOST=0.0.0.0
      - FASTMCP_PORT=8000
    volumes:
      - backend-data:/app/data
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dhafnck-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  frontend:
    build:
      context: ../..
      dockerfile: docker-system/docker/frontend.Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    container_name: dhafnck-frontend
    environment:
      - VITE_API_URL=${BACKEND_URL}
      - VITE_WS_URL=${WS_URL:-ws://localhost:8000}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - frontend-static:/app/dist
    ports:
      - "${FRONTEND_PORT:-3800}:80"
    depends_on:
      - backend
    networks:
      - dhafnck-network
    # Health check disabled for frontend dev server
    # healthcheck:
    #   test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    restart: unless-stopped

volumes:
  postgres-data:
    name: dhafnck-postgres-data
  redis-data:
    name: dhafnck-redis-data
  backend-data:
    name: dhafnck-backend-data
  frontend-static:
    name: dhafnck-frontend-static

networks:
  dhafnck-network:
    name: dhafnck-network
    driver: bridge
    external: false