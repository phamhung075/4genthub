#!/bin/bash

# manage-test-files-bulk - Bulk operations for test file management
# Usage: manage-test-files-bulk [--scan-all] [--dry-run] [--auto-move]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Project structure paths
PROJECT_ROOT="/home/daihungpham/agentic-project"
BACKEND_ROOT="$PROJECT_ROOT/dhafnck_mcp_main"
FRONTEND_ROOT="$PROJECT_ROOT/dhafnck-frontend"
BACKEND_TEST_ROOT="$BACKEND_ROOT/src/tests"
FRONTEND_TEST_ROOT="$FRONTEND_ROOT/tests"

# Flags
DRY_RUN=false
AUTO_MOVE=false
SCAN_ALL=false

# Arrays to track files
declare -a MISPLACED_FILES=()
declare -a OUTDATED_FILES=()
declare -a CORRECT_FILES=()

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_debug() {
    echo -e "${CYAN}[DEBUG]${NC} $1"
}

# Function to check if file is a test file
is_test_file() {
    local file_path="$1"
    local filename=$(basename "$file_path")
    
    # Check if it's a Python test file
    if [[ "$filename" =~ ^test_.*\.py$ ]] || [[ "$filename" =~ .*_test\.py$ ]]; then
        return 0
    fi
    
    # Check if it's a JavaScript/TypeScript test file
    if [[ "$filename" =~ \.test\.(js|jsx|ts|tsx)$ ]] || [[ "$filename" =~ \.spec\.(js|jsx|ts|tsx)$ ]]; then
        return 0
    fi
    
    return 1
}

# Function to check if test file references exist
check_test_references() {
    local file_path="$1"
    local content=$(cat "$file_path" 2>/dev/null || echo "")
    local missing_refs=0
    
    # Extract imports and check if files exist
    while IFS= read -r import_line; do
        # Extract module name from different import patterns
        local module=""
        if [[ "$import_line" =~ from[[:space:]]+([^[:space:]]+)[[:space:]]+import ]]; then
            module="${BASH_REMATCH[1]}"
        elif [[ "$import_line" =~ import[[:space:]]+([^[:space:]]+) ]]; then
            module="${BASH_REMATCH[1]}"
        fi
        
        if [ -n "$module" ]; then
            # Check if it's a relative import to project code
            if [[ "$module" =~ ^fastmcp\.|^src\.|^dhafnck_mcp_main\. ]]; then
                # Convert module to potential file path
                local module_path=$(echo "$module" | sed 's/\./\//g')
                local found=false
                
                # Check various possible locations
                for base in "$BACKEND_ROOT/src" "$BACKEND_ROOT"; do
                    if [ -f "$base/$module_path.py" ] || [ -d "$base/$module_path" ]; then
                        found=true
                        break
                    fi
                done
                
                if [ "$found" = false ]; then
                    ((missing_refs++))
                    print_debug "Missing reference: $module"
                fi
            fi
        fi
    done < <(echo "$content" | grep -E "^(from|import)" | grep -v "^#")
    
    return $missing_refs
}

# Enhanced function to check if file is outdated
is_outdated_test() {
    local file_path="$1"
    local content=$(cat "$file_path" 2>/dev/null || echo "")
    local filename=$(basename "$file_path")
    local reasons=()
    
    # Check for explicit deprecation markers
    if echo "$content" | grep -qE "(DEPRECATED|OUTDATED|OLD|DO NOT USE|OBSOLETE|LEGACY)"; then
        reasons+=("Contains deprecation markers")
    fi
    
    # Check if it's a debug/temporary test file
    if [[ "$filename" =~ (debug|temp|tmp|backup|old|copy|test_test|duplicate) ]]; then
        reasons+=("Filename suggests temporary/debug file")
    fi
    
    # Check file age - if not modified in last 90 days
    local file_age_days=$(( ($(date +%s) - $(stat -c %Y "$file_path" 2>/dev/null || echo 0)) / 86400 ))
    if [ $file_age_days -gt 90 ]; then
        reasons+=("Not modified in $file_age_days days")
    fi
    
    # Check if test has no actual test functions
    if ! echo "$content" | grep -qE "(def test_|class Test|describe\(|it\(|test\()"; then
        reasons+=("No test functions found")
    fi
    
    # Check for missing imports/references
    if check_test_references "$file_path"; [ $? -gt 3 ]; then
        reasons+=("Multiple missing imports/references")
    fi
    
    # Check for TODO/FIXME markers suggesting incomplete tests
    local todo_count=$(echo "$content" | grep -cE "(TODO|FIXME|XXX|HACK)" || true)
    if [ $todo_count -gt 5 ]; then
        reasons+=("High number of TODO/FIXME markers: $todo_count")
    fi
    
    # If we have reasons, it's likely outdated
    if [ ${#reasons[@]} -gt 0 ]; then
        print_warning "Potentially outdated: $filename"
        for reason in "${reasons[@]}"; do
            echo "  - $reason"
        done
        return 0
    fi
    
    return 1
}

# Function to scan for all test files
scan_all_test_files() {
    print_info "Scanning for all test files in the project..."
    
    # Find all test files in project root (misplaced)
    while IFS= read -r file; do
        if is_test_file "$file"; then
            MISPLACED_FILES+=("$file")
        fi
    done < <(find "$PROJECT_ROOT" -maxdepth 1 -type f -name "*.py" -o -name "*.js" -o -name "*.ts" 2>/dev/null)
    
    # Find all test files in dhafnck_mcp_main root (misplaced)
    while IFS= read -r file; do
        if is_test_file "$file"; then
            MISPLACED_FILES+=("$file")
        fi
    done < <(find "$BACKEND_ROOT" -maxdepth 1 -type f -name "*.py" 2>/dev/null)
    
    # Find all test files in correct locations
    while IFS= read -r file; do
        if is_test_file "$file"; then
            if is_outdated_test "$file"; then
                OUTDATED_FILES+=("$file")
            else
                CORRECT_FILES+=("$file")
            fi
        fi
    done < <(find "$BACKEND_TEST_ROOT" "$FRONTEND_TEST_ROOT" -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" \) 2>/dev/null)
}

# Function to generate summary report
generate_report() {
    echo ""
    echo "========================================="
    echo "Test File Management Report"
    echo "========================================="
    echo ""
    
    echo -e "${YELLOW}Misplaced Test Files:${NC} ${#MISPLACED_FILES[@]}"
    if [ ${#MISPLACED_FILES[@]} -gt 0 ]; then
        for file in "${MISPLACED_FILES[@]}"; do
            echo "  - $(basename "$file") in $(dirname "$file")"
        done
    fi
    echo ""
    
    echo -e "${RED}Potentially Outdated Test Files:${NC} ${#OUTDATED_FILES[@]}"
    if [ ${#OUTDATED_FILES[@]} -gt 0 ]; then
        for file in "${OUTDATED_FILES[@]}"; do
            echo "  - $(basename "$file") in $(dirname "$file")"
        done
    fi
    echo ""
    
    echo -e "${GREEN}Correctly Placed Test Files:${NC} ${#CORRECT_FILES[@]}"
    echo ""
    
    echo "========================================="
    echo "Recommendations:"
    echo "========================================="
    
    if [ ${#MISPLACED_FILES[@]} -gt 0 ]; then
        echo "• Run with --auto-move to automatically move misplaced files"
        echo "• Or use 'manage-test-files <file>' to move individual files"
    fi
    
    if [ ${#OUTDATED_FILES[@]} -gt 0 ]; then
        echo "• Review potentially outdated files and remove if no longer needed"
        echo "• Use 'git rm' to remove files and maintain history"
    fi
}

# Function to process misplaced files
process_misplaced_files() {
    if [ ${#MISPLACED_FILES[@]} -eq 0 ]; then
        return
    fi
    
    print_info "Processing misplaced test files..."
    
    for file in "${MISPLACED_FILES[@]}"; do
        if [ "$DRY_RUN" = true ]; then
            print_info "[DRY RUN] Would process: $file"
        elif [ "$AUTO_MOVE" = true ]; then
            print_info "Auto-moving: $(basename "$file")"
            /home/daihungpham/agentic-project/.claude/commands/manage-test-files "$file" < /dev/null
        else
            echo ""
            print_warning "Misplaced file: $file"
            echo -n "Process this file? (y/N): "
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                /home/daihungpham/agentic-project/.claude/commands/manage-test-files "$file"
            fi
        fi
    done
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --auto-move)
                AUTO_MOVE=true
                shift
                ;;
            --scan-all)
                SCAN_ALL=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Show help
show_help() {
    echo "Usage: manage-test-files-bulk [OPTIONS]"
    echo ""
    echo "Bulk operations for test file management in the DhafnckMCP project"
    echo ""
    echo "Options:"
    echo "  --scan-all    Scan entire project for test files"
    echo "  --dry-run     Show what would be done without making changes"
    echo "  --auto-move   Automatically move misplaced files without prompting"
    echo "  --help, -h    Show this help message"
    echo ""
    echo "Examples:"
    echo "  # Scan and report on all test files"
    echo "  manage-test-files-bulk --scan-all"
    echo ""
    echo "  # Dry run to see what would be moved"
    echo "  manage-test-files-bulk --scan-all --dry-run"
    echo ""
    echo "  # Automatically move all misplaced files"
    echo "  manage-test-files-bulk --scan-all --auto-move"
}

# Main function
main() {
    parse_args "$@"
    
    if [ "$SCAN_ALL" = true ]; then
        scan_all_test_files
        generate_report
        
        if [ "$DRY_RUN" = false ]; then
            process_misplaced_files
        fi
    else
        show_help
    fi
}

# Run main function
main "$@"