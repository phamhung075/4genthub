#!/bin/bash

# manage-test-files-smart - Intelligent test file management with documentation awareness
# This script reads project documentation to understand test organization patterns

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Project structure paths
PROJECT_ROOT="/home/daihungpham/agentic-project"
BACKEND_ROOT="$PROJECT_ROOT/dhafnck_mcp_main"
FRONTEND_ROOT="$PROJECT_ROOT/dhafnck-frontend"
BACKEND_TEST_ROOT="$BACKEND_ROOT/src/tests"
FRONTEND_TEST_ROOT="$FRONTEND_ROOT/tests"
DOCS_ROOT="$BACKEND_ROOT/docs"

# Documentation files to consult
TESTING_DOC="$DOCS_ROOT/testing.md"
ARCHITECTURE_DOC="$DOCS_ROOT/architecture.md"
DDD_DOC="$DOCS_ROOT/domain-driven-design.md"

# Test patterns learned from documentation
declare -A TEST_PATTERNS
declare -A DOMAIN_INDICATORS

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_debug() {
    echo -e "${CYAN}[DEBUG]${NC} $1"
}

print_learned() {
    echo -e "${MAGENTA}[LEARNED]${NC} $1"
}

# Function to read and parse testing documentation
parse_testing_documentation() {
    print_info "Reading project testing documentation..."
    
    if [ -f "$TESTING_DOC" ]; then
        # Extract test structure patterns
        local in_structure_section=false
        while IFS= read -r line; do
            # Look for test structure section
            if [[ "$line" =~ "Test Structure" ]] || [[ "$line" =~ "test structure" ]]; then
                in_structure_section=true
            fi
            
            # Extract directory patterns
            if [ "$in_structure_section" = true ] && [[ "$line" =~ ^[[:space:]]*├──[[:space:]]*(.*)/[[:space:]]*#[[:space:]]*(.*) ]]; then
                local dir_name="${BASH_REMATCH[1]}"
                local description="${BASH_REMATCH[2]}"
                TEST_PATTERNS["$dir_name"]="$description"
                print_learned "Test directory: $dir_name - $description"
            fi
            
            # Look for test categories
            if [[ "$line" =~ "Unit Tests" ]] && [ "$in_structure_section" = true ]; then
                # Read unit test indicators
                while IFS= read -r unit_line && [[ ! "$unit_line" =~ ^#+ ]]; do
                    if [[ "$unit_line" =~ ^-[[:space:]]*(.*) ]]; then
                        local indicator="${BASH_REMATCH[1]}"
                        DOMAIN_INDICATORS["unit"]+="$indicator|"
                    fi
                done
            fi
        done < "$TESTING_DOC"
    else
        print_warning "Testing documentation not found at $TESTING_DOC"
    fi
}

# Function to read domain-driven design documentation
parse_ddd_documentation() {
    if [ -f "$DDD_DOC" ]; then
        print_info "Reading DDD documentation for domain patterns..."
        
        # Extract domain layer patterns
        while IFS= read -r line; do
            # Look for domain concepts
            if [[ "$line" =~ (Entity|Value Object|Aggregate|Repository|Service|Use Case|Controller) ]]; then
                local concept="${BASH_REMATCH[1]}"
                case "$concept" in
                    "Entity"|"Value Object"|"Aggregate")
                        DOMAIN_INDICATORS["domain"]+="$concept|"
                        ;;
                    "Repository")
                        DOMAIN_INDICATORS["infrastructure"]+="$concept|"
                        ;;
                    "Service"|"Use Case")
                        DOMAIN_INDICATORS["application"]+="$concept|"
                        ;;
                    "Controller")
                        DOMAIN_INDICATORS["interfaces"]+="$concept|"
                        ;;
                esac
            fi
        done < "$DDD_DOC"
    fi
}

# Enhanced function to determine test type with documentation awareness
determine_test_type_smart() {
    local file_path="$1"
    local content=$(cat "$file_path" 2>/dev/null || echo "")
    local filename=$(basename "$file_path")
    
    # Check against learned patterns first
    for pattern in "${!TEST_PATTERNS[@]}"; do
        local description="${TEST_PATTERNS[$pattern]}"
        case "$pattern" in
            "integration")
                if echo "$content" | grep -qE "(integration|mcp_controller|facade.*integration|database.*integration)"; then
                    print_learned "Matched pattern for $pattern: $description"
                    echo "integration"
                    return
                fi
                ;;
            "unit")
                if echo "$content" | grep -qE "(unit|mock|stub|fake|isolated)"; then
                    if ! echo "$content" | grep -qE "(integration|e2e|performance)"; then
                        echo "unit"
                        return
                    fi
                fi
                ;;
            "e2e")
                if echo "$content" | grep -qE "(e2e|end.to.end|workflow|scenario|journey)"; then
                    print_learned "Matched pattern for $pattern: $description"
                    echo "e2e"
                    return
                fi
                ;;
            "performance")
                if echo "$content" | grep -qE "(performance|load|stress|benchmark|concurrent)"; then
                    print_learned "Matched pattern for $pattern: $description"
                    echo "performance"
                    return
                fi
                ;;
        esac
    done
    
    # Fall back to original logic
    if echo "$content" | grep -q "pytest\|@pytest\|def test_\|class Test"; then
        if echo "$content" | grep -q "integration\|mcp_controller"; then
            echo "integration"
        elif echo "$content" | grep -q "performance\|load_test"; then
            echo "performance"
        elif echo "$content" | grep -q "e2e\|end_to_end"; then
            echo "e2e"
        else
            echo "unit"
        fi
    else
        echo "unknown"
    fi
}

# Enhanced function to determine unit test subdirectory
determine_unit_subdirectory_smart() {
    local file_path="$1"
    local content=$(cat "$file_path" 2>/dev/null || echo "")
    local filename=$(basename "$file_path")
    
    # Use learned domain indicators
    for domain in "${!DOMAIN_INDICATORS[@]}"; do
        local indicators="${DOMAIN_INDICATORS[$domain]}"
        if [ -n "$indicators" ] && echo "$content" | grep -qE "$indicators"; then
            print_learned "Matched domain indicators for: $domain"
            echo "$domain"
            return
        fi
    done
    
    # Check specific DDD patterns
    if echo "$content" | grep -qE "class.*Entity|Entity\)|BaseEntity|AggregateRoot"; then
        echo "unit/domain/entities"
        return
    elif echo "$content" | grep -qE "class.*Repository|Repository\)|BaseRepository|RepositoryInterface"; then
        echo "unit/infrastructure/repositories"
        return
    elif echo "$content" | grep -qE "class.*UseCase|UseCase\)|BaseUseCase|ApplicationService"; then
        echo "unit/application/use_cases"
        return
    elif echo "$content" | grep -qE "class.*Controller|MCPController|APIController"; then
        echo "unit/interfaces/controllers"
        return
    elif echo "$content" | grep -qE "class.*Service|Service\)|DomainService"; then
        echo "unit/domain/services"
        return
    elif echo "$content" | grep -qE "class.*Facade|Facade\)|ApplicationFacade"; then
        echo "unit/application/facades"
        return
    fi
    
    # Task management specific patterns
    if [[ "$filename" =~ task ]] && [[ ! "$filename" =~ subtask ]]; then
        if echo "$content" | grep -q "TaskEntity\|Task("; then
            echo "unit/task_management/domain"
        elif echo "$content" | grep -q "TaskRepository\|TaskApplicationFacade"; then
            echo "unit/task_management/application"
        else
            echo "unit/task_management"
        fi
        return
    fi
    
    # Context management patterns
    if [[ "$filename" =~ context ]]; then
        if echo "$content" | grep -q "HierarchicalContext\|UnifiedContext"; then
            echo "unit/context_management/hierarchical"
        else
            echo "unit/context_management"
        fi
        return
    fi
    
    # Vision system patterns
    if [[ "$filename" =~ vision ]] || echo "$content" | grep -q "VisionSystem\|WorkflowGuidance"; then
        echo "unit/vision"
        return
    fi
    
    # Default fallback
    echo "unit/misc"
}

# Function to validate test file placement
validate_test_placement() {
    local file_path="$1"
    local current_location=$(dirname "$file_path")
    local recommended_location=$(find_correct_location_smart "$file_path")
    
    if [ "$current_location" = "$recommended_location" ]; then
        print_success "✓ Correctly placed according to project standards"
        return 0
    else
        print_warning "✗ Should be in: $recommended_location"
        print_info "  Current: $current_location"
        return 1
    fi
}

# Enhanced function to find correct location
find_correct_location_smart() {
    local file_path="$1"
    local test_type=$(determine_test_type_smart "$file_path")
    local target_dir=""
    
    case "$test_type" in
        "integration")
            target_dir="$BACKEND_TEST_ROOT/integration"
            # Check for specific integration subcategories
            local content=$(cat "$file_path" 2>/dev/null || echo "")
            if echo "$content" | grep -q "mcp.*controller\|manage_.*tool"; then
                target_dir="$BACKEND_TEST_ROOT/integration/mcp_tools"
            elif echo "$content" | grep -q "database\|repository.*integration"; then
                target_dir="$BACKEND_TEST_ROOT/integration/database"
            elif echo "$content" | grep -q "facade.*integration"; then
                target_dir="$BACKEND_TEST_ROOT/integration/facades"
            fi
            ;;
        "unit")
            target_dir=$(determine_unit_subdirectory_smart "$file_path")
            if [[ ! "$target_dir" =~ ^/ ]]; then
                target_dir="$BACKEND_TEST_ROOT/$target_dir"
            fi
            ;;
        "e2e")
            target_dir="$BACKEND_TEST_ROOT/e2e"
            # Check for specific e2e subcategories
            local content=$(cat "$file_path" 2>/dev/null || echo "")
            if echo "$content" | grep -q "task.*workflow"; then
                target_dir="$BACKEND_TEST_ROOT/e2e/task_workflows"
            elif echo "$content" | grep -q "project.*workflow"; then
                target_dir="$BACKEND_TEST_ROOT/e2e/project_workflows"
            elif echo "$content" | grep -q "agent.*workflow"; then
                target_dir="$BACKEND_TEST_ROOT/e2e/agent_workflows"
            fi
            ;;
        "performance")
            target_dir="$BACKEND_TEST_ROOT/performance"
            ;;
        *)
            target_dir=""
            ;;
    esac
    
    echo "$target_dir"
}

# Function to generate placement report
generate_placement_report() {
    local file_path="$1"
    local filename=$(basename "$file_path")
    
    echo ""
    echo "========================================="
    echo "Test File Analysis Report"
    echo "========================================="
    echo "File: $filename"
    echo "Current Location: $(dirname "$file_path")"
    echo ""
    
    # Analyze file
    local test_type=$(determine_test_type_smart "$file_path")
    echo "Detected Type: $test_type"
    
    if [ "$test_type" = "unit" ]; then
        local subdir=$(determine_unit_subdirectory_smart "$file_path")
        echo "Unit Subcategory: $subdir"
    fi
    
    # Check documentation compliance
    echo ""
    echo "Documentation Compliance:"
    validate_test_placement "$file_path"
    
    # Provide recommendations
    local recommended=$(find_correct_location_smart "$file_path")
    if [ -n "$recommended" ]; then
        echo ""
        echo "Recommendation: Move to $recommended"
        
        # Show what documentation says
        echo ""
        echo "According to project documentation:"
        for pattern in "${!TEST_PATTERNS[@]}"; do
            if [[ "$recommended" =~ $pattern ]]; then
                echo "  - $pattern: ${TEST_PATTERNS[$pattern]}"
            fi
        done
    fi
    
    echo "========================================="
}

# Main function for smart analysis
analyze_with_documentation() {
    local file_path="$1"
    
    # First, read and parse documentation
    parse_testing_documentation
    parse_ddd_documentation
    
    # Generate detailed report
    generate_placement_report "$file_path"
    
    # Ask for action
    echo ""
    echo "Actions:"
    echo "  1) Move to recommended location"
    echo "  2) Keep in current location"
    echo "  3) Mark as outdated and remove"
    echo "  4) Skip"
    echo ""
    echo -n "Choose action (1-4): "
    read -r choice
    
    case "$choice" in
        1)
            local target=$(find_correct_location_smart "$file_path")
            if [ -n "$target" ]; then
                mkdir -p "$target"
                mv "$file_path" "$target/"
                print_success "Moved to $target"
            fi
            ;;
        2)
            print_info "Keeping file in current location"
            ;;
        3)
            echo -n "Are you sure you want to remove this file? (y/N): "
            read -r confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                rm "$file_path"
                print_success "Removed outdated file"
            fi
            ;;
        4)
            print_info "Skipped"
            ;;
        *)
            print_warning "Invalid choice"
            ;;
    esac
}

# Show usage
show_usage() {
    echo "Usage: manage-test-files-smart <test_file>"
    echo ""
    echo "Intelligent test file management that reads project documentation"
    echo "to make informed decisions about test file placement."
    echo ""
    echo "Features:"
    echo "  - Reads testing.md to understand test organization"
    echo "  - Reads domain-driven-design.md for DDD patterns"
    echo "  - Provides detailed analysis and recommendations"
    echo "  - Validates against project standards"
    echo ""
    echo "Example:"
    echo "  manage-test-files-smart test_task_completion.py"
}

# Main entry point
main() {
    if [ $# -eq 0 ]; then
        show_usage
        exit 1
    fi
    
    local file_path="$1"
    
    # Convert to absolute path if relative
    if [[ ! "$file_path" = /* ]]; then
        file_path="$(pwd)/$file_path"
    fi
    
    # Check if file exists
    if [ ! -f "$file_path" ]; then
        print_error "File not found: $file_path"
        exit 1
    fi
    
    # Analyze with documentation awareness
    analyze_with_documentation "$file_path"
}

# Run main
main "$@"