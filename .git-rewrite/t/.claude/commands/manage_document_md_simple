#!/bin/bash

# manage_document_md_simple - Simplified documentation management without jq dependency
# This version provides core functionality without requiring jq

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Project paths
PROJECT_ROOT="/home/daihungpham/agentic-project"
BACKEND_ROOT="$PROJECT_ROOT/dhafnck_mcp_main"
FRONTEND_ROOT="$PROJECT_ROOT/dhafnck-frontend"
DOCS_ROOT="$BACKEND_ROOT/docs"
INDEX_FILE="$DOCS_ROOT/index.md"
REPORT_FILE="$DOCS_ROOT/DOCUMENTATION_STATUS.md"

# Time thresholds
STALE_DAYS=30
OLD_DAYS=90

# Arrays to store results
declare -a OUTDATED_DOCS=()
declare -a CURRENT_DOCS=()
declare -a ORPHANED_DOCS=()

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "\n${BOLD}$1${NC}"
    echo "$(printf '%.0s=' {1..60})"
}

# Function to get file age in days
get_file_age_days() {
    local file="$1"
    local current_time=$(date +%s)
    local file_time=$(stat -c %Y "$file" 2>/dev/null || echo 0)
    echo $(( (current_time - file_time) / 86400 ))
}

# Function to get last git commit date for a file
get_last_git_update() {
    local file="$1"
    cd "$(dirname "$file")" 2>/dev/null
    git log -1 --format="%ai" -- "$(basename "$file")" 2>/dev/null || echo "Unknown"
}

# Function to extract document title
get_doc_title() {
    local file="$1"
    grep -m1 "^#[[:space:]]" "$file" 2>/dev/null | sed 's/^#[[:space:]]*//' || basename "$file" .md
}

# Function to categorize document
categorize_doc() {
    local file="$1"
    case "$file" in
        */api-*|*/API*) echo "API Reference" ;;
        */test*|*/Test*) echo "Testing" ;;
        */fix*|*/Fix*) echo "Fixes" ;;
        */vision/*) echo "Vision System" ;;
        */architecture*|*/design*) echo "Architecture" ;;
        */troubleshoot*) echo "Troubleshooting" ;;
        */config*|*/setup*) echo "Configuration" ;;
        */migration*) echo "Migration" ;;
        */CHANGELOG*|*/changelog*) echo "Changelog" ;;
        *) echo "General" ;;
    esac
}

# Function to scan all documentation
scan_documentation() {
    print_header "Scanning Documentation"
    
    local total_count=0
    local outdated_count=0
    local current_count=0
    
    # Find all markdown files
    while IFS= read -r doc; do
        ((total_count++))
        
        local age_days=$(get_file_age_days "$doc")
        local rel_path="${doc#$PROJECT_ROOT/}"
        
        # Check if outdated
        if [ $age_days -gt $OLD_DAYS ]; then
            OUTDATED_DOCS+=("$rel_path|$age_days|very old")
            ((outdated_count++))
        elif [ $age_days -gt $STALE_DAYS ]; then
            OUTDATED_DOCS+=("$rel_path|$age_days|stale")
            ((outdated_count++))
        else
            CURRENT_DOCS+=("$rel_path|$age_days")
            ((current_count++))
        fi
        
        # Progress indicator
        echo -n "."
        
    done < <(find "$PROJECT_ROOT" -name "*.md" -type f -not -path "*/node_modules/*" -not -path "*/00_RESOURCES/*" -not -path "*/00_RULES/*" | grep -E "(dhafnck_mcp_main|dhafnck-frontend)")
    
    echo ""
    print_info "Total documents: $total_count"
    print_info "Current: $current_count"
    print_warning "Outdated: $outdated_count"
}

# Function to find broken links
find_broken_links() {
    print_header "Checking for Broken Links"
    
    local broken_count=0
    
    while IFS= read -r doc; do
        # Extract markdown links
        while IFS= read -r link; do
            local url=$(echo "$link" | sed 's/.*](\([^)]*\)).*/\1/' | sed 's/#.*//')
            
            # Check local file links
            if [[ "$url" =~ ^\.?\/ ]] || [[ ! "$url" =~ ^https?:// ]]; then
                local full_path="$(dirname "$doc")/$url"
                if [ ! -e "$full_path" ] && [ ! -e "$DOCS_ROOT/$url" ]; then
                    echo "  ${doc#$PROJECT_ROOT/} â†’ $url"
                    ((broken_count++))
                fi
            fi
        done < <(grep -oE "\[([^\]]+)\]\(([^)]+)\)" "$doc" 2>/dev/null || true)
    done < <(find "$DOCS_ROOT" -name "*.md" -type f)
    
    if [ $broken_count -eq 0 ]; then
        print_success "No broken links found!"
    else
        print_warning "Found $broken_count broken links"
    fi
}

# Function to find orphaned documents
find_orphaned_docs() {
    print_header "Finding Orphaned Documents"
    
    # Get all docs
    local all_docs=$(find "$DOCS_ROOT" -name "*.md" -type f -printf "%P\n" | sort)
    
    # Get linked docs from index.md and README files
    local linked_docs=""
    for index in "$DOCS_ROOT/index.md" "$DOCS_ROOT/README.md" "$BACKEND_ROOT/README.md"; do
        if [ -f "$index" ]; then
            linked_docs+=$(grep -oE "\[([^\]]+)\]\(([^)]+\.md[^)]*)\)" "$index" 2>/dev/null | sed 's/.*](\([^)]*\)).*/\1/' | sed 's/#.*//' || true)
            linked_docs+=$'\n'
        fi
    done
    
    # Find orphans
    local orphan_count=0
    while IFS= read -r doc; do
        if [[ ! "$doc" =~ (index\.md|README\.md)$ ]]; then
            if ! echo "$linked_docs" | grep -q "$doc"; then
                ORPHANED_DOCS+=("$doc")
                echo "  - $doc"
                ((orphan_count++))
            fi
        fi
    done < <(echo "$all_docs")
    
    if [ $orphan_count -eq 0 ]; then
        print_success "No orphaned documents found!"
    else
        print_warning "Found $orphan_count orphaned documents"
    fi
}

# Function to generate status report
generate_status_report() {
    print_header "Generating Documentation Status Report"
    
    # Run scans if not already done
    [ ${#OUTDATED_DOCS[@]} -eq 0 ] && [ ${#CURRENT_DOCS[@]} -eq 0 ] && scan_documentation
    
    cat > "$REPORT_FILE" << EOF
# Documentation Status Report

Generated: $(date)

## Summary

- Total Documents: $((${#CURRENT_DOCS[@]} + ${#OUTDATED_DOCS[@]}))
- Current Documents: ${#CURRENT_DOCS[@]}
- Outdated Documents: ${#OUTDATED_DOCS[@]}
- Orphaned Documents: ${#ORPHANED_DOCS[@]}

## Outdated Documents

These documents haven't been updated recently and may contain outdated information:

### Very Old (>${OLD_DAYS} days)
EOF
    
    # Add very old docs
    for doc_info in "${OUTDATED_DOCS[@]}"; do
        IFS='|' read -r path age status <<< "$doc_info"
        if [ "$status" = "very old" ]; then
            echo "- $path (${age} days old)" >> "$REPORT_FILE"
        fi
    done
    
    cat >> "$REPORT_FILE" << EOF

### Stale (>${STALE_DAYS} days)
EOF
    
    # Add stale docs
    for doc_info in "${OUTDATED_DOCS[@]}"; do
        IFS='|' read -r path age status <<< "$doc_info"
        if [ "$status" = "stale" ]; then
            echo "- $path (${age} days old)" >> "$REPORT_FILE"
        fi
    done
    
    # Add orphaned docs section
    if [ ${#ORPHANED_DOCS[@]} -gt 0 ]; then
        cat >> "$REPORT_FILE" << EOF

## Orphaned Documents

These documents are not linked from any index:

EOF
        for doc in "${ORPHANED_DOCS[@]}"; do
            echo "- $doc" >> "$REPORT_FILE"
        done
    fi
    
    cat >> "$REPORT_FILE" << EOF

## Recommendations

1. Review and update documents older than $OLD_DAYS days
2. Check stale documents (older than $STALE_DAYS days) for accuracy
3. Link orphaned documents from appropriate index files
4. Remove obsolete documentation
5. Add documentation for any new features

## Document Categories

### By Location
EOF
    
    # Count docs by directory
    find "$DOCS_ROOT" -name "*.md" -type f -printf "%P\n" | sed 's|/[^/]*$||' | sort | uniq -c | while read count dir; do
        [ -z "$dir" ] && dir="(root)"
        echo "- $dir: $count documents" >> "$REPORT_FILE"
    done
    
    print_success "Report generated: $REPORT_FILE"
}

# Function to analyze specific document
analyze_document() {
    local doc_path="$1"
    
    if [ ! -f "$doc_path" ]; then
        print_error "Document not found: $doc_path"
        return 1
    fi
    
    print_header "Document Analysis: $(basename "$doc_path")"
    
    local age_days=$(get_file_age_days "$doc_path")
    local last_update=$(get_last_git_update "$doc_path")
    local title=$(get_doc_title "$doc_path")
    local category=$(categorize_doc "$doc_path")
    local line_count=$(wc -l < "$doc_path")
    local word_count=$(wc -w < "$doc_path")
    
    echo "Title: $title"
    echo "Category: $category"
    echo "Path: ${doc_path#$PROJECT_ROOT/}"
    echo "Age: $age_days days"
    echo "Last Update: $last_update"
    echo "Size: $line_count lines, $word_count words"
    echo ""
    
    # Check for issues
    local issues=()
    [ $age_days -gt $OLD_DAYS ] && issues+=("Very old document")
    [ $age_days -gt $STALE_DAYS ] && [ $age_days -le $OLD_DAYS ] && issues+=("Stale document")
    grep -q "TODO\|FIXME\|WIP" "$doc_path" && issues+=("Contains TODO/FIXME markers")
    grep -q "DEPRECATED\|OUTDATED" "$doc_path" && issues+=("Contains deprecation markers")
    
    if [ ${#issues[@]} -gt 0 ]; then
        echo -e "${YELLOW}Issues Found:${NC}"
        for issue in "${issues[@]}"; do
            echo "  - $issue"
        done
    else
        print_success "No issues found!"
    fi
}

# Main menu
show_menu() {
    echo ""
    print_header "Documentation Management"
    echo "1. Scan all documentation"
    echo "2. Find outdated documents"
    echo "3. Find orphaned documents"
    echo "4. Check for broken links"
    echo "5. Generate status report"
    echo "6. Analyze specific document"
    echo "7. Full analysis (all checks)"
    echo "0. Exit"
    echo ""
    echo -n "Select option: "
}

# Main function
main() {
    if [ $# -eq 0 ]; then
        # Interactive mode
        while true; do
            show_menu
            read -r choice
            
            case $choice in
                1) 
                    scan_documentation
                    ;;
                2) 
                    scan_documentation
                    echo ""
                    print_header "Outdated Documents"
                    for doc_info in "${OUTDATED_DOCS[@]}"; do
                        IFS='|' read -r path age status <<< "$doc_info"
                        echo "  - $path ($age days old, $status)"
                    done
                    ;;
                3) 
                    find_orphaned_docs
                    ;;
                4) 
                    find_broken_links
                    ;;
                5) 
                    generate_status_report
                    ;;
                6) 
                    echo -n "Enter document path: "
                    read -r doc_path
                    analyze_document "$doc_path"
                    ;;
                7) 
                    scan_documentation
                    echo ""
                    find_orphaned_docs
                    echo ""
                    find_broken_links
                    echo ""
                    generate_status_report
                    ;;
                0) 
                    exit 0
                    ;;
                *) 
                    print_error "Invalid option"
                    ;;
            esac
        done
    else
        # Command line mode
        case "$1" in
            --scan)
                scan_documentation
                ;;
            --outdated)
                scan_documentation
                echo ""
                print_header "Outdated Documents"
                for doc_info in "${OUTDATED_DOCS[@]}"; do
                    IFS='|' read -r path age status <<< "$doc_info"
                    echo "  - $path ($age days old, $status)"
                done
                ;;
            --orphaned)
                find_orphaned_docs
                ;;
            --broken-links)
                find_broken_links
                ;;
            --report)
                generate_status_report
                ;;
            --analyze)
                if [ -z "$2" ]; then
                    print_error "Please provide a document path"
                    exit 1
                fi
                analyze_document "$2"
                ;;
            --full)
                scan_documentation
                echo ""
                find_orphaned_docs
                echo ""
                find_broken_links
                echo ""
                generate_status_report
                ;;
            --help|*)
                echo "Usage: manage_document_md_simple [OPTION] [ARGS]"
                echo ""
                echo "Options:"
                echo "  --scan          Scan all documentation"
                echo "  --outdated      Find outdated documents"
                echo "  --orphaned      Find orphaned documents"
                echo "  --broken-links  Check for broken links"
                echo "  --report        Generate status report"
                echo "  --analyze PATH  Analyze specific document"
                echo "  --full          Run full analysis"
                echo "  --help          Show this help"
                echo ""
                echo "Without options, runs in interactive mode."
                ;;
        esac
    fi
}

# Run main
main "$@"