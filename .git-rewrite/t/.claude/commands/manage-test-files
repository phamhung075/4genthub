#!/bin/bash

# manage-test-files - Move test files to correct location and remove outdated test files
# Usage: manage-test-files <test_file_path>

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project structure paths
PROJECT_ROOT="/home/daihungpham/agentic-project"
BACKEND_ROOT="$PROJECT_ROOT/dhafnck_mcp_main"
FRONTEND_ROOT="$PROJECT_ROOT/dhafnck-frontend"
BACKEND_TEST_ROOT="$BACKEND_ROOT/src/tests"
FRONTEND_TEST_ROOT="$FRONTEND_ROOT/tests"

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to determine test type from content
determine_test_type() {
    local file_path="$1"
    local content=$(cat "$file_path" 2>/dev/null || echo "")
    
    # Check for test markers
    if echo "$content" | grep -q "pytest\|@pytest\|def test_\|class Test"; then
        # Python test
        if echo "$content" | grep -q "integration\|mcp_controller\|manage_task\|manage_context\|manage_project\|manage_git_branch\|manage_subtask"; then
            echo "integration"
        elif echo "$content" | grep -q "performance\|load_test\|benchmark"; then
            echo "performance"
        elif echo "$content" | grep -q "e2e\|end_to_end\|workflow"; then
            echo "e2e"
        elif echo "$content" | grep -q "fixture\|test_data\|mock_data"; then
            echo "fixtures"
        else
            echo "unit"
        fi
    elif echo "$content" | grep -q "describe\|it(\|test(\|expect(\|jest\|vitest"; then
        # JavaScript/TypeScript test
        echo "frontend"
    else
        echo "unknown"
    fi
}

# Function to determine specific unit test subdirectory
determine_unit_subdirectory() {
    local file_path="$1"
    local content=$(cat "$file_path" 2>/dev/null || echo "")
    local filename=$(basename "$file_path")
    
    # Check imports and content for domain indicators
    if echo "$content" | grep -q "domain\|entity\|value_object\|aggregate"; then
        echo "domain"
    elif echo "$content" | grep -q "application\|use_case\|service\|facade"; then
        echo "application"
    elif echo "$content" | grep -q "infrastructure\|repository\|database\|orm"; then
        echo "infrastructure"
    elif echo "$content" | grep -q "controller\|mcp_controller\|api\|endpoint"; then
        echo "interfaces"
    elif echo "$content" | grep -q "auth\|authentication\|authorization\|token"; then
        echo "auth"
    elif echo "$content" | grep -q "vision\|context_enrichment\|workflow_guidance"; then
        echo "vision"
    elif echo "$content" | grep -q "parameter\|coercer\|validation\|schema"; then
        echo "validation"
    else
        # Try to guess from filename
        case "$filename" in
            *task*) echo "task_management" ;;
            *project*) echo "project_management" ;;
            *branch*|*git*) echo "git_management" ;;
            *agent*) echo "agent_management" ;;
            *context*) echo "context_management" ;;
            *subtask*) echo "subtask_management" ;;
            *) echo "misc" ;;
        esac
    fi
}

# Function to check if file is outdated
is_outdated_test() {
    local file_path="$1"
    local content=$(cat "$file_path" 2>/dev/null || echo "")
    
    # Check for outdated patterns
    if echo "$content" | grep -q "# DEPRECATED\|# OUTDATED\|# OLD\|# DO NOT USE"; then
        return 0
    fi
    
    # Check if it's a debug/temporary test file
    if [[ $(basename "$file_path") =~ ^test_debug|^debug_test|_temp\.|_old\.|_backup\. ]]; then
        return 0
    fi
    
    # Check if the tested functionality no longer exists
    # This would require more sophisticated analysis
    
    return 1
}

# Function to find the correct location for a test file
find_correct_location() {
    local file_path="$1"
    local test_type=$(determine_test_type "$file_path")
    local target_dir=""
    
    case "$test_type" in
        "integration")
            target_dir="$BACKEND_TEST_ROOT/integration"
            ;;
        "performance")
            target_dir="$BACKEND_TEST_ROOT/performance"
            ;;
        "e2e")
            target_dir="$BACKEND_TEST_ROOT/e2e"
            ;;
        "fixtures")
            target_dir="$BACKEND_TEST_ROOT/fixtures"
            ;;
        "unit")
            local subdir=$(determine_unit_subdirectory "$file_path")
            target_dir="$BACKEND_TEST_ROOT/unit/$subdir"
            ;;
        "frontend")
            target_dir="$FRONTEND_TEST_ROOT"
            ;;
        *)
            target_dir=""
            ;;
    esac
    
    echo "$target_dir"
}

# Function to move test file
move_test_file() {
    local source_path="$1"
    local target_dir="$2"
    local filename=$(basename "$source_path")
    local target_path="$target_dir/$filename"
    
    # Create target directory if it doesn't exist
    mkdir -p "$target_dir"
    
    # Check if file already exists at target
    if [ -f "$target_path" ]; then
        print_warning "File already exists at target: $target_path"
        echo -n "Overwrite? (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            return 1
        fi
    fi
    
    # Move the file
    mv "$source_path" "$target_path"
    print_success "Moved $filename to $target_dir"
    
    # Update imports if it's a Python file
    if [[ "$filename" =~ \.py$ ]]; then
        update_imports "$target_path"
    fi
    
    return 0
}

# Function to update imports after moving
update_imports() {
    local file_path="$1"
    
    # This is a placeholder - actual implementation would need to:
    # 1. Parse Python imports
    # 2. Update relative imports based on new location
    # 3. Update absolute imports if needed
    
    print_info "Consider updating imports in $file_path"
}

# Function to analyze test file
analyze_test_file() {
    local file_path="$1"
    local filename=$(basename "$file_path")
    
    print_info "Analyzing: $filename"
    
    # Check if file exists
    if [ ! -f "$file_path" ]; then
        print_error "File not found: $file_path"
        return 1
    fi
    
    # Check if it's outdated
    if is_outdated_test "$file_path"; then
        print_warning "This appears to be an outdated test file"
        echo -n "Remove this file? (y/N): "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            rm "$file_path"
            print_success "Removed outdated test file: $filename"
            return 0
        fi
    fi
    
    # Find correct location
    local correct_location=$(find_correct_location "$file_path")
    
    if [ -z "$correct_location" ]; then
        print_error "Could not determine correct location for: $filename"
        return 1
    fi
    
    # Check if already in correct location
    local current_dir=$(dirname "$file_path")
    if [ "$current_dir" = "$correct_location" ]; then
        print_success "File is already in correct location: $correct_location"
        return 0
    fi
    
    # Move to correct location
    print_info "Current location: $current_dir"
    print_info "Correct location: $correct_location"
    echo -n "Move file to correct location? (y/N): "
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        move_test_file "$file_path" "$correct_location"
    fi
}

# Main function
main() {
    local test_file="$1"
    
    if [ -z "$test_file" ]; then
        print_error "Usage: manage-test-files <test_file_path>"
        echo ""
        echo "This command will:"
        echo "  - Analyze the test file to determine its type"
        echo "  - Check if it's outdated and should be removed"
        echo "  - Move it to the correct location in the project structure"
        echo ""
        echo "Test structure:"
        echo "  Backend tests: $BACKEND_TEST_ROOT/{unit,integration,e2e,performance,fixtures}"
        echo "  Frontend tests: $FRONTEND_TEST_ROOT"
        exit 1
    fi
    
    # Convert to absolute path if relative
    if [[ ! "$test_file" = /* ]]; then
        test_file="$(pwd)/$test_file"
    fi
    
    # Analyze and process the test file
    analyze_test_file "$test_file"
}

# Run main function
main "$@"