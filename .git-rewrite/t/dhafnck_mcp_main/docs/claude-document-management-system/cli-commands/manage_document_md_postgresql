#!/bin/bash

# manage_document_md_postgresql - PostgreSQL-based documentation management for Claude commands
# This command provides full document lifecycle management with database backend

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Project paths
PROJECT_ROOT="/home/daihungpham/agentic-project"
CLAUDE_ROOT="$PROJECT_ROOT/.claude"
COMMANDS_ROOT="$CLAUDE_ROOT/commands"
DOC_INDEX_PATH="$CLAUDE_ROOT/doc_index.json"
BACKEND_ROOT="$PROJECT_ROOT/dhafnck_mcp_main"

# Database configuration
DB_HOST="${CLAUDE_DOC_DB_HOST:-localhost}"
DB_PORT="${CLAUDE_DOC_DB_PORT:-5432}"
DB_NAME="${CLAUDE_DOC_DB_NAME:-claude_docs}"
DB_USER="${CLAUDE_DOC_DB_USER:-claude}"
DB_PASSWORD="${CLAUDE_DOC_DB_PASSWORD:-}"

# Construct connection string
if [ -n "$DB_PASSWORD" ]; then
    PGPASSWORD="$DB_PASSWORD"
    export PGPASSWORD
fi
DB_CONN="postgresql://$DB_USER@$DB_HOST:$DB_PORT/$DB_NAME"

# Helper functions
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "\n${BOLD}$1${NC}"
    echo "$(printf '%.0s=' {1..60})"
}

# Check database connection
check_db_connection() {
    if psql "$DB_CONN" -c "SELECT 1" > /dev/null 2>&1; then
        return 0
    else
        print_error "Cannot connect to database. Please check configuration:"
        print_error "  Host: $DB_HOST"
        print_error "  Port: $DB_PORT"
        print_error "  Database: $DB_NAME"
        print_error "  User: $DB_USER"
        return 1
    fi
}

# Calculate file hash
calculate_file_hash() {
    local file="$1"
    sha256sum "$file" 2>/dev/null | cut -d' ' -f1 || echo ""
}

# Extract document metadata
extract_metadata() {
    local file="$1"
    local content=$(cat "$file" 2>/dev/null || echo "")
    
    # Extract title
    local title=$(echo "$content" | grep -m1 "^#[[:space:]]" | sed 's/^#[[:space:]]*//' || basename "$file" .md)
    
    # Extract description (first paragraph)
    local description=$(echo "$content" | awk '/^#[[:space:]]/{p=1; next} p && /^[[:space:]]*$/{p=0} p && /^[^#]/' | head -3 | tr '\n' ' ' | sed 's/[[:space:]]\+/ /g' | cut -c1-200)
    
    # Detect category
    local category="general"
    case "$file" in
        *test*) category="testing" ;;
        *api*|*API*) category="api" ;;
        *fix*) category="fixes" ;;
        *setup*|*config*) category="configuration" ;;
        *troubleshoot*) category="troubleshooting" ;;
    esac
    
    echo "$title|$description|$category"
}

# Action: Initialize database
action_init() {
    print_header "Initializing Database"
    
    if ! check_db_connection; then
        return 1
    fi
    
    print_info "Creating database schema..."
    
    psql "$DB_CONN" <<EOF
-- Create documents table
CREATE TABLE IF NOT EXISTS documents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    path TEXT UNIQUE NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    content TEXT NOT NULL,
    category VARCHAR(50),
    status VARCHAR(20) DEFAULT 'active',
    file_hash VARCHAR(64),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by VARCHAR(100) DEFAULT 'system',
    updated_by VARCHAR(100) DEFAULT 'system',
    
    search_vector tsvector GENERATED ALWAYS AS (
        setweight(to_tsvector('english', coalesce(title, '')), 'A') ||
        setweight(to_tsvector('english', coalesce(description, '')), 'B') ||
        setweight(to_tsvector('english', coalesce(content, '')), 'C')
    ) STORED
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_documents_search ON documents USING GIN (search_vector);
CREATE INDEX IF NOT EXISTS idx_documents_path ON documents(path);
CREATE INDEX IF NOT EXISTS idx_documents_category ON documents(category);
CREATE INDEX IF NOT EXISTS idx_documents_status ON documents(status);

-- Create versions table
CREATE TABLE IF NOT EXISTS document_versions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    version_number INTEGER NOT NULL,
    content TEXT NOT NULL,
    change_summary TEXT,
    file_hash VARCHAR(64),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by VARCHAR(100) DEFAULT 'system',
    
    UNIQUE(document_id, version_number)
);

CREATE INDEX IF NOT EXISTS idx_versions_document ON document_versions(document_id);
CREATE INDEX IF NOT EXISTS idx_versions_created ON document_versions(created_at);

-- Create metadata table
CREATE TABLE IF NOT EXISTS document_metadata (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    key VARCHAR(100) NOT NULL,
    value JSONB NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    UNIQUE(document_id, key)
);

CREATE INDEX IF NOT EXISTS idx_metadata_document ON document_metadata(document_id);
CREATE INDEX IF NOT EXISTS idx_metadata_key ON document_metadata(key);

-- Create references table
CREATE TABLE IF NOT EXISTS document_references (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    reference_type VARCHAR(20) NOT NULL,
    reference_value TEXT NOT NULL,
    line_number INTEGER,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_references_document ON document_references(document_id);
CREATE INDEX IF NOT EXISTS idx_references_type_value ON document_references(reference_type, reference_value);

-- Create index table
CREATE TABLE IF NOT EXISTS document_index (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    generated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    total_documents INTEGER NOT NULL DEFAULT 0,
    index_data JSONB NOT NULL,
    file_hash VARCHAR(64)
);

-- Create update trigger function
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS \$\$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
\$\$ LANGUAGE plpgsql;

-- Create trigger
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_documents_updated_at') THEN
        CREATE TRIGGER update_documents_updated_at
        BEFORE UPDATE ON documents
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at();
    END IF;
END;
\$\$;
EOF
    
    print_success "Database initialized successfully"
}

# Action: Sync files with database
action_sync() {
    print_header "Synchronizing Documents"
    
    if ! check_db_connection; then
        return 1
    fi
    
    local dry_run=false
    local force=false
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run) dry_run=true; shift ;;
            --force) force=true; shift ;;
            *) shift ;;
        esac
    done
    
    # Find all markdown files
    local count=0
    local updated=0
    local created=0
    
    while IFS= read -r file; do
        ((count++))
        local rel_path="${file#$COMMANDS_ROOT/}"
        local file_hash=$(calculate_file_hash "$file")
        
        # Check if document exists
        local existing=$(psql -t -A "$DB_CONN" -c "SELECT id, file_hash FROM documents WHERE path = '$rel_path'")
        
        if [ -z "$existing" ]; then
            # New document
            if [ "$dry_run" = true ]; then
                print_info "Would create: $rel_path"
            else
                # Extract metadata
                IFS='|' read -r title description category <<< "$(extract_metadata "$file")"
                local content=$(cat "$file" | sed "s/'/''/g")
                
                psql "$DB_CONN" -c "INSERT INTO documents (path, title, description, content, category, file_hash) VALUES ('$rel_path', '$title', '$description', '$content', '$category', '$file_hash')"
                ((created++))
                print_success "Created: $rel_path"
            fi
        else
            # Existing document
            local db_id=$(echo "$existing" | cut -d'|' -f1)
            local db_hash=$(echo "$existing" | cut -d'|' -f2)
            
            if [ "$file_hash" != "$db_hash" ] || [ "$force" = true ]; then
                if [ "$dry_run" = true ]; then
                    print_info "Would update: $rel_path"
                else
                    # Get current version
                    local current_version=$(psql -t -A "$DB_CONN" -c "SELECT COALESCE(MAX(version_number), 0) FROM document_versions WHERE document_id = '$db_id'")
                    local new_version=$((current_version + 1))
                    
                    # Save current version
                    psql "$DB_CONN" -c "INSERT INTO document_versions (document_id, version_number, content, file_hash) SELECT id, $new_version, content, file_hash FROM documents WHERE id = '$db_id'"
                    
                    # Update document
                    IFS='|' read -r title description category <<< "$(extract_metadata "$file")"
                    local content=$(cat "$file" | sed "s/'/''/g")
                    
                    psql "$DB_CONN" -c "UPDATE documents SET title = '$title', description = '$description', content = '$content', category = '$category', file_hash = '$file_hash' WHERE id = '$db_id'"
                    ((updated++))
                    print_success "Updated: $rel_path (version $new_version)"
                fi
            fi
        fi
    done < <(find "$COMMANDS_ROOT" -name "*.md" -type f | sort)
    
    print_info "Processed $count documents: $created created, $updated updated"
    
    # Check for deleted files
    local deleted_query="SELECT path FROM documents WHERE path NOT IN (SELECT REPLACE(path, '$COMMANDS_ROOT/', '') FROM (VALUES "
    local first=true
    
    while IFS= read -r file; do
        local rel_path="${file#$COMMANDS_ROOT/}"
        if [ "$first" = true ]; then
            deleted_query+="('$rel_path')"
            first=false
        else
            deleted_query+=", ('$rel_path')"
        fi
    done < <(find "$COMMANDS_ROOT" -name "*.md" -type f)
    
    deleted_query+=") AS existing(path))"
    
    while IFS= read -r deleted_path; do
        if [ -n "$deleted_path" ]; then
            if [ "$dry_run" = true ]; then
                print_warning "Would mark as archived: $deleted_path"
            else
                psql "$DB_CONN" -c "UPDATE documents SET status = 'archived' WHERE path = '$deleted_path'"
                print_warning "Archived: $deleted_path"
            fi
        fi
    done < <(psql -t -A "$DB_CONN" -c "$deleted_query")
}

# Action: Search documents
action_search() {
    local query="$1"
    shift
    
    if [ -z "$query" ]; then
        print_error "Search query required"
        return 1
    fi
    
    if ! check_db_connection; then
        return 1
    fi
    
    local category=""
    local limit=20
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --category) category="$2"; shift 2 ;;
            --limit) limit="$2"; shift 2 ;;
            *) shift ;;
        esac
    done
    
    print_header "Search Results for: $query"
    
    local where_clause="WHERE document_fts @@ plainto_tsquery('english', '$query')"
    if [ -n "$category" ]; then
        where_clause+=" AND category = '$category'"
    fi
    
    local search_query="
    SELECT 
        path,
        title,
        description,
        category,
        ts_rank(search_vector, plainto_tsquery('english', '$query')) AS rank,
        updated_at
    FROM documents
    $where_clause
    ORDER BY rank DESC, updated_at DESC
    LIMIT $limit"
    
    local results=$(psql -t "$DB_CONN" -c "$search_query")
    
    if [ -z "$results" ]; then
        print_info "No results found"
    else
        echo "$results" | while IFS='|' read -r path title desc cat rank updated; do
            echo -e "\n${BOLD}$title${NC}"
            echo -e "${CYAN}Path:${NC} $path"
            echo -e "${CYAN}Category:${NC} $cat | ${CYAN}Updated:${NC} $updated"
            echo -e "${CYAN}Description:${NC} $desc"
            echo -e "${CYAN}Relevance:${NC} $(printf "%.2f" "$rank")"
        done
    fi
}

# Action: List documents
action_list() {
    if ! check_db_connection; then
        return 1
    fi
    
    local category=""
    local status="active"
    local updated_since=""
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --category) category="$2"; shift 2 ;;
            --status) status="$2"; shift 2 ;;
            --updated-since) updated_since="$2"; shift 2 ;;
            *) shift ;;
        esac
    done
    
    print_header "Document List"
    
    local where_clause="WHERE status = '$status'"
    if [ -n "$category" ]; then
        where_clause+=" AND category = '$category'"
    fi
    if [ -n "$updated_since" ]; then
        where_clause+=" AND updated_at >= '$updated_since'"
    fi
    
    local list_query="
    SELECT 
        path,
        title,
        category,
        status,
        updated_at
    FROM documents
    $where_clause
    ORDER BY category, path"
    
    psql "$DB_CONN" -c "$list_query"
}

# Action: Show document
action_show() {
    local identifier="$1"
    
    if [ -z "$identifier" ]; then
        print_error "Document path or ID required"
        return 1
    fi
    
    if ! check_db_connection; then
        return 1
    fi
    
    # Check if identifier is UUID or path
    local where_clause
    if [[ "$identifier" =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
        where_clause="id = '$identifier'"
    else
        where_clause="path = '$identifier'"
    fi
    
    local doc=$(psql -t "$DB_CONN" -c "SELECT id, path, title, description, category, status, created_at, updated_at FROM documents WHERE $where_clause")
    
    if [ -z "$doc" ]; then
        print_error "Document not found"
        return 1
    fi
    
    IFS='|' read -r id path title desc cat status created updated <<< "$doc"
    
    print_header "Document Details"
    echo -e "${CYAN}ID:${NC} $id"
    echo -e "${CYAN}Path:${NC} $path"
    echo -e "${CYAN}Title:${NC} $title"
    echo -e "${CYAN}Description:${NC} $desc"
    echo -e "${CYAN}Category:${NC} $cat"
    echo -e "${CYAN}Status:${NC} $status"
    echo -e "${CYAN}Created:${NC} $created"
    echo -e "${CYAN}Updated:${NC} $updated"
    
    # Show versions
    echo -e "\n${BOLD}Version History:${NC}"
    psql "$DB_CONN" -c "SELECT version_number, created_at, created_by FROM document_versions WHERE document_id = '$id' ORDER BY version_number DESC LIMIT 5"
}

# Action: Generate index
action_index() {
    if ! check_db_connection; then
        return 1
    fi
    
    local output_file="$DOC_INDEX_PATH"
    local format="json"
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --output) output_file="$2"; shift 2 ;;
            --format) format="$2"; shift 2 ;;
            *) shift ;;
        esac
    done
    
    print_header "Generating Document Index"
    
    # Get statistics
    local total=$(psql -t -A "$DB_CONN" -c "SELECT COUNT(*) FROM documents WHERE status = 'active'")
    local categories=$(psql -t "$DB_CONN" -c "SELECT category, COUNT(*) FROM documents WHERE status = 'active' GROUP BY category")
    
    # Generate index data
    local index_data='{
  "generated": "'$(date -Iseconds)'",
  "stats": {
    "total_documents": '$total',
    "categories": {'
    
    # Add category counts
    local first=true
    echo "$categories" | while IFS='|' read -r cat count; do
        if [ -n "$cat" ]; then
            if [ "$first" = false ]; then
                index_data+=','
            fi
            index_data+="
      \"$cat\": $count"
            first=false
        fi
    done
    
    index_data+='
    }
  },
  "documents": ['
    
    # Add documents
    first=true
    while IFS='|' read -r path title desc cat updated hash; do
        if [ "$first" = false ]; then
            index_data+=','
        fi
        index_data+='
    {
      "path": "'$path'",
      "title": "'$(echo "$title" | sed 's/"/\\"/g')'",
      "description": "'$(echo "$desc" | sed 's/"/\\"/g')'",
      "category": "'$cat'",
      "updated": "'$updated'",
      "hash": "'$hash'"
    }'
        first=false
    done < <(psql -t "$DB_CONN" -c "SELECT path, title, description, category, updated_at, file_hash FROM documents WHERE status = 'active' ORDER BY path")
    
    index_data+='
  ]
}'
    
    # Write to file
    echo "$index_data" > "$output_file"
    
    # Calculate hash and store in database
    local index_hash=$(calculate_file_hash "$output_file")
    psql "$DB_CONN" -c "INSERT INTO document_index (total_documents, index_data, file_hash) VALUES ($total, '$index_data'::jsonb, '$index_hash')"
    
    print_success "Index generated: $output_file"
    print_info "Total documents: $total"
}

# Action: Integrate with MCP
action_mcp_integrate() {
    local action="$1"
    shift
    
    case "$action" in
        create-task)
            local doc_path="$1"
            local task_title="Update documentation: $(basename "$doc_path" .md)"
            
            print_info "Creating MCP task for documentation update..."
            
            # This would integrate with MCP tools
            echo "mcp__dhafnck_mcp_http__manage_task("
            echo "    action='create',"
            echo "    git_branch_id='$BRANCH_ID',"
            echo "    title='$task_title',"
            echo "    description='Update command documentation',"
            echo "    labels=['documentation', 'cli-commands']"
            echo ")"
            ;;
            
        track-change)
            local doc_id="$1"
            local change_summary="$2"
            
            print_info "Tracking document change in MCP context..."
            
            echo "mcp__dhafnck_mcp_http__manage_context("
            echo "    action='update',"
            echo "    level='task',"
            echo "    context_id='$TASK_ID',"
            echo "    data={"
            echo "        'document_operation': 'update',"
            echo "        'document_id': '$doc_id',"
            echo "        'changes': '$change_summary'"
            echo "    }"
            echo ")"
            ;;
            
        *)
            print_error "Unknown MCP action: $action"
            return 1
            ;;
    esac
}

# Show usage
show_usage() {
    cat << EOF
${BOLD}Claude Document Management System (PostgreSQL)${NC}

${CYAN}Usage:${NC}
  manage_document_md [action] [options]

${CYAN}Actions:${NC}
  ${GREEN}init${NC}              Initialize database schema
  ${GREEN}sync${NC}              Synchronize files with database
                    Options: --force, --dry-run
  ${GREEN}search${NC} <query>    Full-text search documents
                    Options: --category CATEGORY, --limit N
  ${GREEN}list${NC}              List documents
                    Options: --category CATEGORY, --status STATUS, --updated-since DATE
  ${GREEN}show${NC} <path|id>    Show document details
  ${GREEN}index${NC}             Generate doc_index.json
                    Options: --output FILE, --format json|yaml
  ${GREEN}mcp${NC} <action>      MCP integration commands
                    Actions: create-task, track-change

${CYAN}Environment Variables:${NC}
  CLAUDE_DOC_DB_HOST      Database host (default: localhost)
  CLAUDE_DOC_DB_PORT      Database port (default: 5432)
  CLAUDE_DOC_DB_NAME      Database name (default: claude_docs)
  CLAUDE_DOC_DB_USER      Database user (default: claude)
  CLAUDE_DOC_DB_PASSWORD  Database password

${CYAN}Examples:${NC}
  # Initialize database
  manage_document_md init

  # Sync all documents
  manage_document_md sync

  # Search for API documentation
  manage_document_md search "api" --category api

  # List recently updated docs
  manage_document_md list --updated-since "2024-01-01"

  # Generate index
  manage_document_md index --output .claude/doc_index.json
EOF
}

# Main script
main() {
    local action="${1:-help}"
    shift || true
    
    case "$action" in
        init)
            action_init "$@"
            ;;
        sync)
            action_sync "$@"
            ;;
        search)
            action_search "$@"
            ;;
        list)
            action_list "$@"
            ;;
        show)
            action_show "$@"
            ;;
        index)
            action_index "$@"
            ;;
        mcp)
            action_mcp_integrate "$@"
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            print_error "Unknown action: $action"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"