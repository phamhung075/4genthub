services:
  dhafnck-mcp:
    build:
      context: ../..
      dockerfile: dhafnck_mcp_main/docker/Dockerfile
      target: runtime
    image: dhafnck/mcp-server:latest
    container_name: dhafnck-mcp-server
    restart: unless-stopped
    
    # Port mapping for HTTP MCP server
    ports:
      - "8000:8000"
    
    # Environment variables for PostgreSQL
    environment:
      PYTHONPATH: /app/src
      FASTMCP_LOG_LEVEL: INFO
      FASTMCP_ENABLE_RICH_TRACEBACKS: 0
      DATA_STORAGE_MODE: internal
      
      # PostgreSQL Configuration
      DATABASE_TYPE: postgresql
      DATABASE_URL: postgresql://dhafnck_user:dhafnck_password@postgres:5432/dhafnck_mcp
      
      # Legacy paths (for backward compatibility)
      MCP_DB_PATH: /data/dhafnck_mcp.db
      TASKS_JSON_PATH: /data/tasks
      PROJECTS_FILE_PATH: /data/projects/projects.json
      CURSOR_RULES_DIR: /data/rules
      AGENT_LIBRARY_DIR_PATH: /app/agent-library
      
      # Auth & API settings
      DHAFNCK_AUTH_ENABLED: true
      DHAFNCK_MVP_MODE: false
      SUPABASE_URL: ""
      SUPABASE_ANON_KEY: ""
      DHAFNCK_TOKEN: ""
      FASTMCP_TRANSPORT: streamable-http
      FASTMCP_HOST: 0.0.0.0
      FASTMCP_PORT: 8000
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      SESSION_TTL: 3600
      MAX_EVENTS_PER_SESSION: 1000
      SESSION_COMPRESSION: true
      SESSION_KEY_PREFIX: "mcp:session:"
      REDIS_SOCKET_TIMEOUT: 5
      REDIS_CONNECT_TIMEOUT: 5
      REDIS_HEALTH_CHECK_INTERVAL: 30
      SESSION_PERSISTENCE_ENABLED: true
      FALLBACK_TO_MEMORY: true
      SESSION_DEBUG_LOGGING: false
    
    # Volume mounts for data persistence
    volumes:
      # Data persistence (still used for files/logs)
      - dhafnck_data:/data
      - dhafnck_logs:/app/logs
      
      # Configuration files
      - ./config:/app/config:ro
    
    # Health check for HTTP mode
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    container_name: dhafnck-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dhafnck_mcp
      POSTGRES_USER: dhafnck_user
      POSTGRES_PASSWORD: dhafnck_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema/postgresql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dhafnck_user -d dhafnck_mcp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  redis:
    image: redis:7-alpine
    container_name: dhafnck-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

  dhafnck-frontend:
    build:
      context: ../../dhafnck-frontend
      dockerfile: docker/Dockerfile
    image: dhafnck/frontend:latest
    container_name: dhafnck-frontend
    restart: unless-stopped
    ports:
      - "3800:80"
    depends_on:
      - dhafnck-mcp
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

# Named volumes for data persistence
volumes:
  dhafnck_data:
    driver: local
  
  dhafnck_logs:
    driver: local
  
  postgres_data:
    driver: local
  
  redis_data:
    driver: local