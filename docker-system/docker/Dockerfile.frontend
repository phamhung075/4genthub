# Highly Optimized Frontend Dockerfile for agenthub
# Uses BuildKit cache mounts, layer optimization, and proper multi-stage builds

# syntax=docker/dockerfile:1
ARG NODE_VERSION=20
ARG NODE_ENV=development

# ============================================
# Stage 1: Dependencies (Base for all stages)
# ============================================
FROM node:${NODE_VERSION}-alpine AS dependencies

WORKDIR /app

# Copy package files
COPY agenthub-frontend/package*.json ./

# Install all dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# ============================================
# Stage 2: Development Server
# ============================================
FROM dependencies AS development

# Copy source code with proper layering
COPY agenthub-frontend/public/ ./public/
COPY agenthub-frontend/src/ ./src/
COPY agenthub-frontend/index.html agenthub-frontend/vite.config.ts agenthub-frontend/tsconfig.json ./
COPY agenthub-frontend/tailwind.config.* ./
COPY agenthub-frontend/postcss.config.js ./

# Set development optimizations
ENV NODE_OPTIONS="--max-old-space-size=2048" \
    NODE_ENV=development \
    VITE_HMR_PORT=3800

# Create non-root user (handle existing GID gracefully)
RUN (addgroup -g 1001 -S agenthub 2>/dev/null || addgroup -S agenthub) && \
    (adduser -u 1001 -S agenthub -G agenthub 2>/dev/null || adduser -S agenthub -G agenthub) && \
    chown -R agenthub:agenthub /app

USER agenthub

EXPOSE 3800

HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD wget --spider -q http://localhost:3800/ || exit 1

CMD ["npm", "start"]

# ============================================
# Stage 3: Production Builder
# ============================================
FROM dependencies AS builder

# Copy source for building
COPY agenthub-frontend/ ./

# Build arguments for environment variables
ARG VITE_API_URL
ARG REACT_APP_SUPABASE_URL  
ARG REACT_APP_SUPABASE_ANON_KEY

# Set build environment
ENV NODE_ENV=production \
    VITE_API_URL=${VITE_API_URL:-http://localhost:8000} \
    REACT_APP_SUPABASE_URL=${REACT_APP_SUPABASE_URL} \
    REACT_APP_SUPABASE_ANON_KEY=${REACT_APP_SUPABASE_ANON_KEY}

# Build with cache mount for node_modules
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=node_modules/.vite \
    npm run build

# Optimize build output
RUN find build -name "*.js" -type f -exec gzip -9 -k {} \; && \
    find build -name "*.css" -type f -exec gzip -9 -k {} \; && \
    find build -name "*.html" -type f -exec gzip -9 -k {} \;

# ============================================
# Stage 4: Production Server (nginx)
# ============================================
FROM nginx:alpine AS production

# Install curl for healthcheck
RUN apk add --no-cache curl brotli

# Copy built files from builder
COPY --from=builder /app/build /usr/share/nginx/html

# Optimized nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
# Enable gzip
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_comp_level 6;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml;

# Enable brotli if available
load_module modules/ngx_http_brotli_filter_module.so;
load_module modules/ngx_http_brotli_static_module.so;

server {
    listen 3800;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Cache static assets aggressively
    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Serve pre-compressed files if available
        gzip_static on;
        brotli_static on;
    }
    
    # Cache HTML files for shorter time
    location ~* \\.html$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # API proxy with connection pooling
    location /api/ {
        proxy_pass \${VITE_API_URL:-http://backend:8000}/;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Connection pooling
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # WebSocket proxy with keep-alive
    location /ws/ {
        proxy_pass \${VITE_WS_URL:-ws://backend:8000}/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }
    
    # React Router support with fallback
    location / {
        try_files \$uri \$uri/ /index.html;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Create non-root user for nginx (handle existing users gracefully)
RUN (addgroup -g 101 -S nginx 2>/dev/null || getent group nginx >/dev/null || addgroup -S nginx) && \
    (adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx nginx 2>/dev/null || getent passwd nginx >/dev/null || adduser -S -D -H -h /var/cache/nginx -s /sbin/nologin -G nginx nginx)

EXPOSE 3800

HEALTHCHECK --interval=15s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3800/health || exit 1

CMD ["nginx", "-g", "daemon off;"]

# ============================================
# Final Stage Selection Based on NODE_ENV
# ============================================
FROM ${NODE_ENV} AS final