# Production Backend Dockerfile for DhafnckMCP
# Multi-stage build optimized for production deployment
# Features: Security hardening, minimal image size, optimized layers

# Stage 1: Builder
FROM python:3.11-slim as builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install uv for fast dependency management
RUN pip install --no-cache-dir uv

# Copy dependency files
COPY dhafnck_mcp_main/pyproject.toml dhafnck_mcp_main/uv.lock* dhafnck_mcp_main/README.md ./dhafnck_mcp_main/

# Install dependencies in a virtual environment
WORKDIR /build/dhafnck_mcp_main
RUN uv venv /opt/venv
RUN /opt/venv/bin/uv pip install --no-cache .

# Stage 2: Production Runtime
FROM python:3.11-slim

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq-dev \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Copy application code
COPY --chown=appuser:appuser dhafnck_mcp_main/ ./dhafnck_mcp_main/

# Create necessary directories with proper permissions
RUN mkdir -p /data /data/logs /data/resources /app/.cache \
    && chown -R appuser:appuser /data /app/.cache

# Set Python environment for production
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONPATH="/app/dhafnck_mcp_main/src:/app:$PYTHONPATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Production environment defaults
ENV APP_DEBUG=false
ENV ENV=production
ENV APP_LOG_LEVEL=INFO

# Security settings
ENV PYTHONHASHSEED=random
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Create production entrypoint script
RUN cat <<'EOF' > /app/docker-entrypoint.sh
#!/bin/sh
set -e

echo "Starting DhafnckMCP Production Server..."
echo "================================================"

# Validate required environment variables
REQUIRED_VARS="DATABASE_TYPE DATABASE_HOST DATABASE_PORT DATABASE_NAME DATABASE_USER DATABASE_PASSWORD FASTMCP_PORT JWT_SECRET_KEY"
MISSING_VARS=""

for VAR in $REQUIRED_VARS; do
    eval VALUE=\$$VAR
    if [ -z "$VALUE" ]; then
        MISSING_VARS="$MISSING_VARS $VAR"
        echo "❌ Missing required variable: $VAR"
    fi
done

if [ -n "$MISSING_VARS" ]; then
    echo ""
    echo "❌ ERROR: Missing required environment variables:$MISSING_VARS"
    echo "Please ensure all production environment variables are set"
    exit 1
fi

# Security check for JWT secret
if [ ${#JWT_SECRET_KEY} -lt 32 ]; then
    echo "❌ ERROR: JWT_SECRET_KEY must be at least 32 characters for production"
    exit 1
fi

# Validate database connection
echo "Validating database connection..."
RETRIES=10
while [ $RETRIES -gt 0 ]; do
    if pg_isready -h ${DATABASE_HOST} -p ${DATABASE_PORT} -U ${DATABASE_USER} 2>/dev/null; then
        echo "✅ Database connection verified"
        break
    fi
    echo "  Waiting for database... ($RETRIES retries left)"
    RETRIES=$((RETRIES - 1))
    sleep 3
done

if [ $RETRIES -eq 0 ]; then
    echo "❌ ERROR: Database connection failed"
    exit 1
fi

# Run database migrations if enabled
if [ "${AUTO_MIGRATE:-false}" = "true" ]; then
    echo "Running database migrations..."
    cd /app/dhafnck_mcp_main
    python scripts/init_database.py || {
        echo "❌ ERROR: Database migration failed"
        exit 1
    }
fi

echo ""
echo "Configuration:"
echo "  Environment: ${ENV}"
echo "  Database: ${DATABASE_TYPE} at ${DATABASE_HOST}:${DATABASE_PORT}"
echo "  Server Port: ${FASTMCP_PORT}"
echo "  Auth Enabled: ${AUTH_ENABLED:-true}"
echo "  Rate Limiting: ${FEATURE_RATE_LIMITING:-true}"
echo "================================================"

# Start the production server with optimized settings
echo ""
echo "🚀 Starting FastMCP production server..."
cd /app/dhafnck_mcp_main

# Use gunicorn or uvicorn for production
if command -v gunicorn >/dev/null 2>&1; then
    exec gunicorn fastmcp.server:app \
        --bind 0.0.0.0:${FASTMCP_PORT} \
        --workers ${WORKERS:-4} \
        --worker-class uvicorn.workers.UvicornWorker \
        --timeout ${WORKER_TIMEOUT:-120} \
        --keep-alive ${KEEP_ALIVE:-5} \
        --max-requests ${MAX_REQUESTS:-1000} \
        --max-requests-jitter ${MAX_REQUESTS_JITTER:-50} \
        --access-logfile - \
        --error-logfile - \
        --log-level ${APP_LOG_LEVEL:-info}
else
    exec python -m uvicorn fastmcp.server:app \
        --host 0.0.0.0 \
        --port ${FASTMCP_PORT} \
        --workers ${WORKERS:-1} \
        --loop uvloop \
        --log-level ${APP_LOG_LEVEL:-info}
fi
EOF

RUN chmod +x /app/docker-entrypoint.sh

# Switch to non-root user
USER appuser

EXPOSE 8000

# Production health check with tighter constraints
HEALTHCHECK --interval=30s --timeout=5s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:${FASTMCP_PORT:-8000}/health || exit 1

ENTRYPOINT ["/app/docker-entrypoint.sh"]