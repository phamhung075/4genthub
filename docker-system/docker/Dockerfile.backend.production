# Production Backend Dockerfile for DhafnckMCP
# Multi-stage build optimized for production deployment
# Features: Security hardening, minimal image size, optimized layers

# Stage 1: Builder
FROM --platform=${BUILDPLATFORM:-linux/amd64} python:3.11-slim as builder

WORKDIR /build

# Accept build arguments (even if not used in builder stage)
ARG CAPROVER_GIT_COMMIT_SHA

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install uv for fast dependency management
RUN pip install --no-cache-dir uv

# Copy dependency files
COPY dhafnck_mcp_main/pyproject.toml dhafnck_mcp_main/uv.lock* dhafnck_mcp_main/README.md ./dhafnck_mcp_main/

# Install dependencies in a virtual environment
WORKDIR /build/dhafnck_mcp_main
RUN uv venv /opt/venv
RUN uv pip install --system --python /opt/venv/bin/python --no-cache .

# Stage 2: Production Runtime
FROM --platform=${TARGETPLATFORM:-linux/amd64} python:3.11-slim

# Accept build arguments for environment configuration
ARG APP_DEBUG=false
ARG APP_LOG_LEVEL=INFO
ARG AUTH_ENABLED=true
ARG AUTH_PROVIDER=keycloak
ARG AUTO_MIGRATE=false
ARG CAPROVER_GIT_COMMIT_SHA
ARG CORS_ALLOW_CREDENTIALS=true
ARG CORS_ORIGINS
ARG DATABASE_HOST
ARG DATABASE_NAME=dhafnck_mcp
ARG DATABASE_PASSWORD
ARG DATABASE_PORT=5432
ARG DATABASE_SSL_MODE=require
ARG DATABASE_TYPE=postgresql
ARG DATABASE_USER=postgres
ARG ENV=production
ARG FASTMCP_HOST=0.0.0.0
ARG FASTMCP_PORT=8000
ARG FEATURE_HIERARCHICAL_CONTEXT=true
ARG FEATURE_MULTI_AGENT=true
ARG FEATURE_RATE_LIMITING=true
ARG FEATURE_REQUEST_LOGGING=false
ARG FEATURE_VISION_SYSTEM=true
ARG JWT_SECRET_KEY
ARG KEYCLOAK_CLIENT_ID
ARG KEYCLOAK_CLIENT_SECRET
ARG KEYCLOAK_REALM
ARG KEYCLOAK_URL
ARG NODE_ENV=production

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq-dev \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Copy application code
COPY --chown=appuser:appuser dhafnck_mcp_main/ ./dhafnck_mcp_main/

# Create necessary directories with proper permissions
RUN mkdir -p /data /data/logs /data/resources /app/.cache \
    && chown -R appuser:appuser /data /app/.cache

# Set Python environment for production
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONPATH="/app/dhafnck_mcp_main/src:/app:$PYTHONPATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Convert build args to environment variables with defaults
ENV APP_DEBUG=${APP_DEBUG}
ENV APP_LOG_LEVEL=${APP_LOG_LEVEL}
ENV AUTH_ENABLED=${AUTH_ENABLED}
ENV AUTH_PROVIDER=${AUTH_PROVIDER}
ENV AUTO_MIGRATE=${AUTO_MIGRATE}
ENV CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS}
ENV CORS_ORIGINS=${CORS_ORIGINS}
ENV DATABASE_HOST=${DATABASE_HOST}
ENV DATABASE_NAME=${DATABASE_NAME}
ENV DATABASE_PASSWORD=${DATABASE_PASSWORD}
ENV DATABASE_PORT=${DATABASE_PORT}
ENV DATABASE_SSL_MODE=${DATABASE_SSL_MODE}
ENV DATABASE_TYPE=${DATABASE_TYPE}
ENV DATABASE_USER=${DATABASE_USER}
ENV ENV=${ENV}
ENV FASTMCP_HOST=${FASTMCP_HOST}
ENV FASTMCP_PORT=${FASTMCP_PORT}
ENV FEATURE_HIERARCHICAL_CONTEXT=${FEATURE_HIERARCHICAL_CONTEXT}
ENV FEATURE_MULTI_AGENT=${FEATURE_MULTI_AGENT}
ENV FEATURE_RATE_LIMITING=${FEATURE_RATE_LIMITING}
ENV FEATURE_REQUEST_LOGGING=${FEATURE_REQUEST_LOGGING}
ENV FEATURE_VISION_SYSTEM=${FEATURE_VISION_SYSTEM}
ENV JWT_SECRET_KEY=${JWT_SECRET_KEY}
ENV KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
ENV KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
ENV KEYCLOAK_REALM=${KEYCLOAK_REALM}
ENV KEYCLOAK_URL=${KEYCLOAK_URL}
ENV NODE_ENV=${NODE_ENV}

# CapRover-specific environment variables
ENV CAPROVER_GIT_COMMIT_SHA=${CAPROVER_GIT_COMMIT_SHA}

# Security settings
ENV PYTHONHASHSEED=random
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Create production entrypoint script with printf for clean line endings
RUN printf '#!/bin/sh\nset -e\n\necho "Starting DhafnckMCP Production Server..."\necho "================================================"\n\n# Validate required environment variables\nREQUIRED_VARS="DATABASE_TYPE DATABASE_HOST DATABASE_PORT DATABASE_NAME DATABASE_USER DATABASE_PASSWORD FASTMCP_PORT JWT_SECRET_KEY"\nMISSING_VARS=""\n\nfor VAR in $REQUIRED_VARS; do\n    eval VALUE=\\$$VAR\n    if [ -z "$VALUE" ]; then\n        MISSING_VARS="$MISSING_VARS $VAR"\n        echo "❌ Missing required variable: $VAR"\n    fi\ndone\n\nif [ -n "$MISSING_VARS" ]; then\n    echo ""\n    echo "❌ ERROR: Missing required environment variables:$MISSING_VARS"\n    echo "Please ensure all production environment variables are set"\n    exit 1\nfi\n\n# Security check for JWT secret\nif [ ${#JWT_SECRET_KEY} -lt 32 ]; then\n    echo "❌ ERROR: JWT_SECRET_KEY must be at least 32 characters for production"\n    exit 1\nfi\n\n# Validate database connection\necho "Validating database connection..."\nRETRIES=10\nwhile [ $RETRIES -gt 0 ]; do\n    if pg_isready -h ${DATABASE_HOST} -p ${DATABASE_PORT} -U ${DATABASE_USER} 2>/dev/null; then\n        echo "✅ Database connection verified"\n        break\n    fi\n    echo "  Waiting for database... ($RETRIES retries left)"\n    RETRIES=$((RETRIES - 1))\n    sleep 3\ndone\n\nif [ $RETRIES -eq 0 ]; then\n    echo "❌ ERROR: Database connection failed"\n    exit 1\nfi\n\n# Run database migrations if enabled\nif [ "${AUTO_MIGRATE:-false}" = "true" ]; then\n    echo "Running database migrations..."\n    cd /app/dhafnck_mcp_main\n    python scripts/init_database.py || {\n        echo "❌ ERROR: Database migration failed"\n        exit 1\n    }\nfi\n\necho ""\necho "Configuration:"\necho "  Environment: ${ENV}"\necho "  Database: ${DATABASE_TYPE} at ${DATABASE_HOST}:${DATABASE_PORT}"\necho "  Server Port: ${FASTMCP_PORT}"\necho "  Auth Enabled: ${AUTH_ENABLED:-true}"\necho "  Rate Limiting: ${FEATURE_RATE_LIMITING:-true}"\necho "================================================"\n\n# Start the production server with optimized settings\necho ""\necho "🚀 Starting FastMCP production server..."\ncd /app/dhafnck_mcp_main\n\n# Use gunicorn or uvicorn for production\nif command -v gunicorn >/dev/null 2>&1; then\n    exec gunicorn fastmcp.server:app \\\n        --bind 0.0.0.0:${FASTMCP_PORT} \\\n        --workers ${WORKERS:-4} \\\n        --worker-class uvicorn.workers.UvicornWorker \\\n        --timeout ${WORKER_TIMEOUT:-120} \\\n        --keep-alive ${KEEP_ALIVE:-5} \\\n        --max-requests ${MAX_REQUESTS:-1000} \\\n        --max-requests-jitter ${MAX_REQUESTS_JITTER:-50} \\\n        --access-logfile - \\\n        --error-logfile - \\\n        --log-level ${APP_LOG_LEVEL:-info}\nelse\n    exec python -m uvicorn fastmcp.server:app \\\n        --host 0.0.0.0 \\\n        --port ${FASTMCP_PORT} \\\n        --workers ${WORKERS:-1} \\\n        --loop uvloop \\\n        --log-level ${APP_LOG_LEVEL:-info}\nfi\n' > /app/docker-entrypoint.sh

# Set proper permissions and ensure Unix line endings
RUN chmod +x /app/docker-entrypoint.sh

# Switch to non-root user
USER appuser

EXPOSE 8000

# Production health check with tighter constraints
HEALTHCHECK --interval=30s --timeout=5s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:${FASTMCP_PORT:-8000}/health || exit 1

ENTRYPOINT ["/app/docker-entrypoint.sh"]