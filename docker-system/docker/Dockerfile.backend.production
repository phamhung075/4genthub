# Multi-stage build for production
FROM python:3.11-slim as builder

# Build arguments from CapRover environment variables
ARG APP_DEBUG
ARG APP_ENV
ARG APP_LOG_LEVEL
ARG AUTH_ENABLED
ARG AUTH_PROVIDER
ARG CAPROVER_GIT_COMMIT_SHA
ARG CORS_ALLOW_CREDENTIALS
ARG CORS_ORIGINS
ARG DATABASE_HOST
ARG DATABASE_NAME
ARG DATABASE_PASSWORD
ARG DATABASE_PORT
ARG DATABASE_SSL_MODE
ARG DATABASE_TYPE
ARG DATABASE_URL
ARG DATABASE_USER
ARG ENV
ARG FASTMCP_PORT
ARG FEATURE_AUTO_COMPACT
ARG FEATURE_HIERARCHICAL_CONTEXT
ARG FEATURE_MULTI_AGENT
ARG FEATURE_RATE_LIMITING
ARG FEATURE_REQUEST_LOGGING
ARG FEATURE_VISION_SYSTEM
ARG FRONTEND_PORT
ARG KEYCLOAK_CLIENT_ID
ARG KEYCLOAK_CLIENT_SECRET
ARG KEYCLOAK_PUBLIC_KEY_CACHE_TTL
ARG KEYCLOAK_REALM
ARG KEYCLOAK_SSL_VERIFY
ARG KEYCLOAK_TOKEN_CACHE_TTL
ARG KEYCLOAK_URL
ARG KEYCLOAK_VERIFY_TOKEN_AUDIENCE
ARG MCP_HOST
ARG MCP_SECRET_KEY
ARG PYTHONDONTWRITEBYTECODE
ARG PYTHONUNBUFFERED

WORKDIR /app</anG>

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install uv
RUN pip install uv

# Copy dependency files to /app for better Docker caching
COPY dhafnck_mcp_main/pyproject.toml ./
COPY dhafnck_mcp_main/uv.lock ./
COPY dhafnck_mcp_main/README.md ./

# Copy source code 
COPY dhafnck_mcp_main/ ./dhafnck_mcp_main/

# Production stage
FROM python:3.11-slim as runtime

# Re-declare build arguments for runtime stage
ARG APP_DEBUG
ARG APP_ENV
ARG APP_LOG_LEVEL
ARG AUTH_ENABLED
ARG AUTH_PROVIDER
ARG CORS_ALLOW_CREDENTIALS
ARG CORS_ORIGINS
ARG DATABASE_HOST
ARG DATABASE_NAME
ARG DATABASE_PASSWORD
ARG DATABASE_PORT
ARG DATABASE_SSL_MODE
ARG DATABASE_TYPE
ARG DATABASE_URL
ARG DATABASE_USER
ARG ENV
ARG FASTMCP_PORT
ARG FEATURE_AUTO_COMPACT
ARG FEATURE_HIERARCHICAL_CONTEXT
ARG FEATURE_MULTI_AGENT
ARG FEATURE_RATE_LIMITING
ARG FEATURE_REQUEST_LOGGING
ARG FEATURE_VISION_SYSTEM
ARG FRONTEND_PORT
ARG KEYCLOAK_CLIENT_ID
ARG KEYCLOAK_CLIENT_SECRET
ARG KEYCLOAK_PUBLIC_KEY_CACHE_TTL
ARG KEYCLOAK_REALM
ARG KEYCLOAK_SSL_VERIFY
ARG KEYCLOAK_TOKEN_CACHE_TTL
ARG KEYCLOAK_URL
ARG KEYCLOAK_VERIFY_TOKEN_AUDIENCE
ARG MCP_HOST
ARG MCP_SECRET_KEY
ARG PYTHONDONTWRITEBYTECODE
ARG PYTHONUNBUFFERED

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install uv for dependency management
RUN pip install uv

# Copy application code and dependencies
COPY dhafnck_mcp_main/ ./dhafnck_mcp_main/
COPY dhafnck_mcp_main/pyproject.toml ./

# Install Python dependencies directly in system (production only)
RUN cd dhafnck_mcp_main && uv pip install --system .

# Copy optional directories with error handling
RUN mkdir -p ./agent-library ./configuration && \
    cp -r dhafnck_mcp_main/agent-library/* ./agent-library/ 2>/dev/null || echo "No agent-library found" && \
    cp -r dhafnck_mcp_main/configuration/* ./configuration/ 2>/dev/null || echo "No configuration found"

# Create necessary directories
RUN mkdir -p /var/log/dhafnck-mcp /app/data

# Set environment path (using system Python, no venv)
ENV PATH="/usr/local/bin:$PATH"

# Set Python environment
ENV PYTHONPATH="/app/dhafnck_mcp_main/src:/app:$PYTHONPATH"
ENV PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
ENV PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE:-1}

# Set application environment variables from build args
ENV APP_DEBUG=${APP_DEBUG:-false}
ENV APP_ENV=${APP_ENV:-production}
ENV APP_LOG_LEVEL=${APP_LOG_LEVEL:-INFO}
ENV AUTH_ENABLED=${AUTH_ENABLED:-true}
ENV AUTH_PROVIDER=${AUTH_PROVIDER}
ENV CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
ENV CORS_ORIGINS=${CORS_ORIGINS}
ENV DATABASE_HOST=${DATABASE_HOST}
ENV DATABASE_NAME=${DATABASE_NAME}
ENV DATABASE_PASSWORD=${DATABASE_PASSWORD}
ENV DATABASE_PORT=${DATABASE_PORT:-5432}
ENV DATABASE_SSL_MODE=${DATABASE_SSL_MODE:-prefer}
ENV DATABASE_TYPE=${DATABASE_TYPE:-postgresql}
ENV DATABASE_URL=${DATABASE_URL}
ENV DATABASE_USER=${DATABASE_USER}
ENV ENV=${ENV:-production}
ENV FASTMCP_PORT=${FASTMCP_PORT:-8000}
ENV FEATURE_AUTO_COMPACT=${FEATURE_AUTO_COMPACT:-true}
ENV FEATURE_HIERARCHICAL_CONTEXT=${FEATURE_HIERARCHICAL_CONTEXT:-true}
ENV FEATURE_MULTI_AGENT=${FEATURE_MULTI_AGENT:-true}
ENV FEATURE_RATE_LIMITING=${FEATURE_RATE_LIMITING:-true}
ENV FEATURE_REQUEST_LOGGING=${FEATURE_REQUEST_LOGGING:-true}
ENV FEATURE_VISION_SYSTEM=${FEATURE_VISION_SYSTEM:-true}
ENV FRONTEND_PORT=${FRONTEND_PORT:-3800}
ENV KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
ENV KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
ENV KEYCLOAK_PUBLIC_KEY_CACHE_TTL=${KEYCLOAK_PUBLIC_KEY_CACHE_TTL:-3600}
ENV KEYCLOAK_REALM=${KEYCLOAK_REALM}
ENV KEYCLOAK_SSL_VERIFY=${KEYCLOAK_SSL_VERIFY:-true}
ENV KEYCLOAK_TOKEN_CACHE_TTL=${KEYCLOAK_TOKEN_CACHE_TTL:-300}
ENV KEYCLOAK_URL=${KEYCLOAK_URL}
ENV KEYCLOAK_VERIFY_TOKEN_AUDIENCE=${KEYCLOAK_VERIFY_TOKEN_AUDIENCE:-true}
ENV MCP_HOST=${MCP_HOST:-0.0.0.0}
ENV MCP_SECRET_KEY=${MCP_SECRET_KEY}

# Health check - use FASTMCP_PORT environment variable
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:${FASTMCP_PORT:-8000}/health || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["python", "-m", "fastmcp.server"]