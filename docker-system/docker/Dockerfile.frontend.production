# Cache bust: 1757949765
# Production Frontend Dockerfile for 4genthub
# Multi-stage build optimized for production deployment
# Features: Minimal image size, optimized assets, security hardening
# Version: 2.0.4 - Force rebuild with correct API endpoints (2025-09-15)

# Stage 1: Builder
FROM --platform=${BUILDPLATFORM:-linux/amd64} node:20-alpine as builder

WORKDIR /build

# Copy package files (explicitly include package-lock.json)
COPY 4genthub-frontend/package.json 4genthub-frontend/package-lock.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY 4genthub-frontend/ .

# Accept build arguments for CapRover compatibility
ARG VITE_API_URL
ARG VITE_BACKEND_URL
ARG VITE_KEYCLOAK_URL
ARG VITE_KEYCLOAK_REALM
ARG VITE_KEYCLOAK_CLIENT_ID
ARG VITE_ENV=production
ARG VITE_BUILD_TIME
ARG VITE_BUILD_SHA

# Additional build arguments that CapRover might pass
ARG NODE_ENV=production
ARG FRONTEND_PORT=3800
ARG CAPROVER_GIT_COMMIT_SHA
ARG ENV=production
ARG APP_DEBUG=false
ARG APP_LOG_LEVEL=INFO

# Build-time environment variables - use placeholders for runtime injection
# These will be replaced at runtime via env-config.js
# IMPORTANT: Using placeholders ensures the app relies on runtime config (2025-09-15)
ENV VITE_API_URL=__RUNTIME_INJECTED__
ENV VITE_BACKEND_URL=__RUNTIME_INJECTED__
ENV VITE_KEYCLOAK_URL=__RUNTIME_INJECTED__
ENV VITE_KEYCLOAK_REALM=__RUNTIME_INJECTED__
ENV VITE_KEYCLOAK_CLIENT_ID=__RUNTIME_INJECTED__
ENV VITE_ENV=${VITE_ENV}
ENV VITE_BUILD_TIME=${VITE_BUILD_TIME}
ENV VITE_BUILD_SHA=${VITE_BUILD_SHA}
ENV NODE_ENV=${NODE_ENV}

# Build the application with production optimizations
RUN npm run build

# Stage 2: Production Runtime with Nginx
FROM --platform=${TARGETPLATFORM:-linux/amd64} nginx:alpine

# Accept runtime build arguments
ARG VITE_API_URL
ARG VITE_BACKEND_URL
ARG VITE_KEYCLOAK_URL
ARG VITE_KEYCLOAK_REALM
ARG VITE_KEYCLOAK_CLIENT_ID
ARG FRONTEND_PORT=3800
ARG CAPROVER_GIT_COMMIT_SHA
ARG ENV=production

# Install curl and setup nginx config (optimized single layer)
RUN apk add --no-cache curl && \
    rm -rf /etc/nginx/conf.d/*

# Create nginx config template for runtime customization
RUN printf 'server {\n    listen 3800;\n    listen [::]:3800;\n    server_name _;\n\n    root /usr/share/nginx/html;\n    index index.html;\n\n    # Security headers\n    add_header X-Frame-Options "SAMEORIGIN" always;\n    add_header X-Content-Type-Options "nosniff" always;\n    add_header X-XSS-Protection "1; mode=block" always;\n    add_header Referrer-Policy "strict-origin-when-cross-origin" always;\n    add_header Content-Security-Policy "default-src '\''self'\''; script-src '\''self'\'' '\''unsafe-inline'\'' '\''unsafe-eval'\''; style-src '\''self'\'' '\''unsafe-inline'\''; img-src '\''self'\'' data: https:; font-src '\''self'\'' data:; connect-src '\''self'\'' ${VITE_API_URL} ${VITE_BACKEND_URL} ${VITE_KEYCLOAK_URL};" always;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json application/font-woff application/font-woff2;\n\n    # Cache static assets\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        expires 1y;\n        add_header Cache-Control "public, immutable";\n    }\n\n    # Don'\''t cache HTML (for updates)\n    location ~* \\.(html)$ {\n        expires -1;\n        add_header Cache-Control "no-cache, no-store, must-revalidate";\n    }\n\n    # SPA routing - serve index.html for all routes\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        return 200 "healthy\\n";\n        add_header Content-Type text/plain;\n    }\n\n    # Disable access to hidden files\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n}\n' > /etc/nginx/conf.d/default.conf.template

# Create startup script and set permissions (optimized single layer)
RUN printf '#!/bin/sh\nset -e\n\necho "Starting 4genthub Frontend Production Server..."\necho "================================================"\n\n# Validate required environment variables\nREQUIRED_VARS="VITE_API_URL VITE_BACKEND_URL"\nMISSING_VARS=""\n\nfor VAR in $REQUIRED_VARS; do\n    eval VALUE=\\$$VAR\n    if [ -z "$VALUE" ]; then\n        MISSING_VARS="$MISSING_VARS $VAR"\n        echo "❌ Missing required variable: $VAR"\n    else\n        echo "✅ $VAR configured"\n    fi\ndone\n\nif [ -n "$MISSING_VARS" ]; then\n    echo ""\n    echo "❌ ERROR: Missing required environment variables:$MISSING_VARS"\n    exit 1\nfi\n\n# Validate Keycloak configuration\nif [ -n "$VITE_KEYCLOAK_URL" ] && [ -n "$VITE_KEYCLOAK_REALM" ] && [ -n "$VITE_KEYCLOAK_CLIENT_ID" ]; then\n    echo "✅ Keycloak authentication configured"\nelse\n    echo "⚠️  WARNING: Keycloak not fully configured - authentication may not work"\nfi\n\necho ""\necho "Configuration Summary:"\necho "  Backend URL: ${VITE_BACKEND_URL}"\necho "  API URL: ${VITE_API_URL}"\necho "  Environment: production"\necho "  Port: 3800"\necho "================================================"\n\n# Create runtime env-config.js for the app\ncat > /usr/share/nginx/html/env-config.js <<EOL\n// Runtime configuration - injected at container startup\nwindow._env_ = {\n  VITE_API_URL: '\''${VITE_API_URL:-http://localhost:8000}'\'',\n  VITE_BACKEND_URL: '\''${VITE_BACKEND_URL:-${VITE_API_URL:-http://localhost:8000}}'\'',\n  VITE_KEYCLOAK_URL: '\''${VITE_KEYCLOAK_URL:-}'\'',\n  VITE_KEYCLOAK_REALM: '\''${VITE_KEYCLOAK_REALM:-}'\'',\n  VITE_KEYCLOAK_CLIENT_ID: '\''${VITE_KEYCLOAK_CLIENT_ID:-}'\'',\n  VITE_ENV: '\''${VITE_ENV:-production}'\'',\n  VITE_DEBUG: '\''${VITE_DEBUG:-false}'\'',\n  VITE_APP_NAME: '\''${VITE_APP_NAME:-4genthub}'\''\n};\nEOL\n\n# Replace environment variables in nginx config template\nenvsubst '\''${VITE_API_URL} ${VITE_BACKEND_URL} ${VITE_KEYCLOAK_URL}'\'' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf\n\n# Create runtime config file for the app (legacy format)\ncat > /usr/share/nginx/html/config.json <<EOL\n{\n  "apiUrl": "${VITE_API_URL}",\n  "backendUrl": "${VITE_BACKEND_URL}",\n  "keycloakUrl": "${VITE_KEYCLOAK_URL}",\n  "keycloakRealm": "${VITE_KEYCLOAK_REALM}",\n  "keycloakClientId": "${VITE_KEYCLOAK_CLIENT_ID}",\n  "environment": "production"\n}\nEOL\n\necho ""\necho "🚀 Starting nginx server on port 3800..."\nexec nginx -g '\''daemon off;'\''\n' > /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Copy built application from builder
COPY --from=builder /build/build /usr/share/nginx/html

# Create non-root user for nginx
RUN addgroup -g 1001 -S nginx-group && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-group -g nginx nginx-user && \
    chown -R nginx-user:nginx-group /usr/share/nginx/html /var/cache/nginx /var/log/nginx /etc/nginx/conf.d

# Use non-root user
USER nginx-user

EXPOSE 3800

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3800/health || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]