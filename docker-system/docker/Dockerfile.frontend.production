# Multi-stage build for React frontend
FROM node:20-alpine AS builder

WORKDIR /app

# Build arguments - MUST be passed during docker build
ARG VITE_BACKEND_URL
ARG VITE_API_URL
ARG VITE_KEYCLOAK_URL
ARG VITE_KEYCLOAK_REALM
ARG VITE_KEYCLOAK_CLIENT_ID
ARG VITE_ENVIRONMENT=production
ARG BUILD_DATE
ARG VCS_REF

# Set environment variables for Vite build (CRITICAL!)
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_BACKEND_URL=${VITE_BACKEND_URL}
ENV VITE_KEYCLOAK_URL=${VITE_KEYCLOAK_URL}
ENV VITE_KEYCLOAK_REALM=${VITE_KEYCLOAK_REALM}
ENV VITE_KEYCLOAK_CLIENT_ID=${VITE_KEYCLOAK_CLIENT_ID}
ENV VITE_ENVIRONMENT=${VITE_ENVIRONMENT}
ENV VITE_BUILD_TIME=${BUILD_DATE}
ENV VITE_BUILD_SHA=${VCS_REF}

# Copy package files from frontend directory
COPY dhafnck-frontend/package*.json ./

# Install dependencies - use ci for faster, reproducible builds
RUN npm ci || npm install

# Copy frontend source code
COPY dhafnck-frontend/ .

# Build the application with environment variables
RUN echo "Building with VITE_API_URL=${VITE_API_URL}" && \
    echo "Building with VITE_BACKEND_URL=${VITE_BACKEND_URL}" && \
    npm run build

# Production stage with nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Create custom nginx configuration for SPA
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    # Handle SPA routing \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # Security headers \
    add_header X-Frame-Options "SAMEORIGIN" always; \
    add_header X-Content-Type-Options "nosniff" always; \
    add_header X-XSS-Protection "1; mode=block" always; \
    \
    # Compression \
    gzip on; \
    gzip_types text/plain text/css text/javascript application/javascript application/json; \
    gzip_min_length 1000; \
}' > /etc/nginx/conf.d/default.conf

# Copy built application from builder stage (Vite outputs to 'build' directory)
COPY --from=builder /app/build /usr/share/nginx/html

# Create health check endpoint
RUN echo "healthy" > /usr/share/nginx/html/health

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]