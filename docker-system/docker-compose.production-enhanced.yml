version: '3.8'

# Production Enhanced Docker Compose Configuration
# Includes monitoring, security hardening, and production optimizations

services:
  # PostgreSQL Database with production optimizations
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-dhafnck-postgres-prod}
    restart: always
    user: postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8 --data-checksums"
      # Production performance tuning
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 2GB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 32MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_HUGE_PAGES: try
      POSTGRES_MIN_WAL_SIZE: 2GB
      POSTGRES_MAX_WAL_SIZE: 8GB
      POSTGRES_CHECKPOINT_TIMEOUT: 30min
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
      - postgres_logs:/var/log/postgresql
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - dhafnck_internal
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: dhafnck-redis-prod
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - dhafnck_internal
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MCP Backend with security hardening
  mcp-backend:
    build:
      context: .
      dockerfile: docker-system/docker/Dockerfile.backend.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    container_name: dhafnck-mcp-backend
    restart: always
    user: "1000:1000"
    read_only: true
    env_file:
      - ${ENV_FILE:-.env.production}
    environment:
      DATABASE_HOST: postgres
      REDIS_HOST: redis
      ENV: production
      APP_ENV: production
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /app
      # Security headers
      SECURE_SSL_REDIRECT: true
      SECURE_PROXY_SSL_HEADER: HTTP_X_FORWARDED_PROTO,https
      SECURE_HSTS_SECONDS: 31536000
      SECURE_HSTS_INCLUDE_SUBDOMAINS: true
      SECURE_CONTENT_TYPE_NOSNIFF: true
      SECURE_BROWSER_XSS_FILTER: true
      SECURE_X_FRAME_OPTIONS: DENY
    ports:
      - "${MCP_PORT:-8000}:8000"
    volumes:
      - app_logs:/app/logs
      - app_tmp:/tmp
      - app_cache:/app/cache
    networks:
      - dhafnck_internal
      - dhafnck_external
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /app/tmp:noexec,nosuid,size=256m
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend with nginx optimization
  frontend:
    build:
      context: ./dhafnck-frontend
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    container_name: dhafnck-frontend
    restart: always
    read_only: true
    environment:
      REACT_APP_API_URL: ${BACKEND_URL}
      REACT_APP_KEYCLOAK_URL: ${KEYCLOAK_URL}
      REACT_APP_KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      REACT_APP_KEYCLOAK_CLIENT_ID: mcp-frontend
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    volumes:
      - nginx_cache:/var/cache/nginx:rw
      - nginx_logs:/var/log/nginx
    networks:
      - dhafnck_external
    depends_on:
      - mcp-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "10"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: dhafnck-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - dhafnck_external
    depends_on:
      - mcp-backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: dhafnck-prometheus
    restart: always
    user: "nobody"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    networks:
      - dhafnck_internal
    profiles: ["monitoring"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: dhafnck-grafana
    restart: always
    user: "472"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - dhafnck_internal
    profiles: ["monitoring"]
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: dhafnck-node-exporter
    restart: always
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - dhafnck_internal
    profiles: ["monitoring"]
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Cadvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: dhafnck-cadvisor
    restart: always
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - dhafnck_internal
    profiles: ["monitoring"]
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: dhafnck-loki
    restart: always
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - dhafnck_internal
    profiles: ["logging"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: dhafnck-promtail
    restart: always
    volumes:
      - ./config/promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - dhafnck_internal
    profiles: ["logging"]
    depends_on:
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

networks:
  dhafnck_internal:
    name: dhafnck_internal
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  dhafnck_external:
    name: dhafnck_external
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres_data:
    name: dhafnck_postgres_prod_data
  postgres_backup:
    name: dhafnck_postgres_prod_backup
  postgres_logs:
    name: dhafnck_postgres_logs
  redis_data:
    name: dhafnck_redis_data
  app_logs:
    name: dhafnck_app_logs
  app_tmp:
    name: dhafnck_app_tmp
  app_cache:
    name: dhafnck_app_cache
  nginx_cache:
    name: dhafnck_nginx_cache
  nginx_logs:
    name: dhafnck_nginx_logs
  prometheus_data:
    name: dhafnck_prometheus_data
  grafana_data:
    name: dhafnck_grafana_data
  loki_data:
    name: dhafnck_loki_data

secrets:
  db_password:
    file: ./secrets/db_password.txt